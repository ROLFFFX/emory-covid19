{"version":3,"sources":["components/AppBar.js","components/MapProvider.js","utils.js","components/useGeographies.js","components/Geographies.js","components/Geography.js","components/ComposableMap.js","components/Notes.js","components/StateMap.js","components/CountyReport.js","components/CountyCompare.js","components/AboutUs.js","components/DataSources.js","components/App.js","index.js"],"names":["AppBar","props","history","useHistory","Menu","borderless","inverted","fixed","style","backgroundImage","backgroundSize","Container","Item","as","header","Image","size","src","onClick","push","fontSize","fontWeight","color","lineHeight","active","menu","content","name","geoPath","d3Geo","projections","MapContext","createContext","MapProvider","width","height","offsetX","offsetY","projection","projectionConfig","restProps","center","cx","cy","rotate","rx","ry","rz","parallels","p1","p2","s","scale","projMemo","useMemo","scl","proj","translate","forEach","d","makeProjection","useCallback","value","path","Provider","getFeatures","geographies","parseGeographies","Array","isArray","feats","feature","objects","Object","keys","features","useGeographies","geography","useContext","useState","setGeographies","useEffect","url","window","fetch","then","res","ok","Error","statusText","json","catch","error","console","log","geos","map","i","rsmKey","svgPath","prepareFeatures","Geographies","children","className","length","memo","onMouseEnter","onMouseLeave","onMouseDown","onMouseUp","onFocus","onBlur","isPressed","setPressed","isFocused","setFocus","tabIndex","evt","ComposableMap","Notes","paddingTop","colorPalette","colorPalette1","marks","label","SvgMap","lengthSplit1","_","key","x","y","fill","strokeWidth","stroke","legendSplit","splitpoint","toFixed","legendSplit1","legendMin","legendMax","ChartGraph","dataTS","varGraphPair","metric","stateFips","countyFips","data1","theme","VictoryTheme","material","containerComponent","voronoiBlacklist","labels","datum","Date","t","toLocaleDateString","Math","round","labelComponent","dy","constrainToVisibleArea","padding","left","right","top","bottom","tickLabels","tickFormat","month","day","tickValues","dependentAxis","tickCount","data","barWidth","alignment","data2","takeRight","StateMap","config","setConfig","stateName","setStateName","setCountyFips","countyName","setCountyName","setData","dataUs","setDataUs","dateCur","setDateCur","casesdaily","casesdailymean14","setCovidMetric","covidMetric14","setCovidMetric14","setDataTS","setTooltipContent","colorScale","setColorScale","setLegendMax","setLegendMin","setLegendMaxGraph","setLegendSplit","setLegendSplit1","setMetric","metricOptions1","text","dropdownopt","metricName","setMetricName","varNameMap","delayHandler","setDelayHandler","configMatched","configs","find","fips","k","temp_Data_metric","each","sort","a","b","countIqr","quantile","belowIqr","filter","upIqr","split","scaleQuantile","domain","range","split1","quantiles","thr","thr1","floor","csUs","max","min","rateIqr","IQR3","indexColor","interV","dicto","m","marginTop","minWidth","Breadcrumb","Section","Divider","hidden","Grid","columns","Column","paddingLeft","Header","Content","Dropdown","icon","background","borderTop","borderLeft","borderRight","borderBottom","borderRadius","minHeight","paddingBottom","inline","search","pointing","options","onChange","e","data-tip","geo","properties","COUNTYFP","default","outline","pressed","setTimeout","fips2county","clearTimeout","paddingRight","Slider","defaultValue","aria-labelledby","valueLabelDisplay","step","Row","centered","align","todaydate","year","Subheader","Loader","numberWithCommas","toString","pattern","test","replace","BarChart","colors","domainPadding","pad","ylog","minDomain","responsive","title","textAnchor","horizontal","barRatio","keyv","var","dx","CountyReport","useParams","configsCounty","zipCode","setZipCode","setZipCodeFinal","data_cases","setDataCG","data_deaths","setDataDG","datades_cases","setDatadesCG","datades_deaths","setDatadesDG","dataG","setDataG","dataZip","setDataZip","setDataMapOut","setLegendMaxD","setLegendMinD","setLegendSplitD","setColorScaleD","tooltipContent","casescum","deathscum","casescumR","deathscumR","deathsdailymean14","casesdailymean14R","deathsdailymean14R","covidMetric","covidMetricLast","setCovidMetricLast","covidMetricGa","setCovidMetricGa","varMap","setVarMap","configscounty","countyfips","cs","Number","scaleMap","csD","link","textAlign","Table","called","HeaderCell","colSpan","Popup","trigger","todaydat","basic","flowing","hoverable","List","toLocaleString","casescum14day","parseFloat","casescum14dayR","category14day","change14day","celled","singleLine","date","deathscum14day","deathscum14dayR","cfr","casesdailymean7","deathsdailymean7","cfrcompare","column","take","deathsdaily","event","ZCTA5CE10","verticalAnchor","fontFamily","standalone","labelRadius","padAngle","striped","compact","Body","v","includes","Cell","isNaN","href","colorPalette2","CountyCompare","setStateFips","measureA","setMeasureA","measureB","setMeasureB","colorScaleA","setColorScaleA","colorScaleB","setColorScaleB","measureOptionsA","setMeasureOptionsA","measureOptionsB","setMeasureOptionsB","group","coldata","dataFltrd","substring","placeholder","selection","stateOptions","fluid","labeled","cur","AboutUs","bulleted","DataSources","App","to","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.d67b47ff.chunk.js","sourcesContent":["import React from \"react\";\nimport ErrorBoundary from \"react-error-boundary\";\nimport { Container, Menu, Image, Divider } from 'semantic-ui-react';\n\nimport { useHistory } from 'react-router-dom';\n\n\nexport default function AppBar(props) {\n\n  const history = useHistory();\n\n  return (\n    <ErrorBoundary>\n      <Menu borderless inverted fixed='top'\n        style={{backgroundImage: 'url(\"/Emory_COVID_header_LightBlue.jpg\")',\n                backgroundSize: 'cover'}}>\n      {/* <Menu borderless inverted fixed='top'\n        style={{backgroundImage: 'url(\"https://www.htmlcsscolor.com/preview/128x128/103052.png\")',\n                backgroundSize: 'cover'}}> */}\n        <Container>\n          <Menu.Item as='a' header>\n                <Image size='mini' src='https://dph.georgia.gov/themes/custom/ga_forest/orchard/assets/images/icons/logo/ga-logo--gold.svg' />\n          </Menu.Item>\n          \n          <Menu.Item as='a' header onClick={() => history.push('/')}>\n            <span style={{fontSize: '17px',fontWeight: 400, color: '#fff', lineHeight: 1.3}}>\n           <strong>Georgia Department</strong>\n           <br></br>\n           <em>of</em>\n           <strong>&nbsp;Public Health</strong>\n           </span>\n          </Menu.Item>\n          <Menu.Item \n            active={props.menu==='countyReport'} \n            content='Home'\n            onClick={() => history.push('/13')}\n            name='countyReport'/>\n          {/* <Menu.Item \n            active={props.menu==='countyCompare'} \n            onClick={() => history.push('/compare-counties')}\n            name='countyCompare'>\n            Compare Counties\n          </Menu.Item> */}\n          {/* <Menu.Item \n            active={props.menu==='dataSources'} \n            onClick={() => history.push('/data-sources')}\n            name='dataSources'>\n            Data Sources &<br/>Interpretation\n          </Menu.Item>\n          <Menu.Item \n            active={props.menu==='aboutUs'} \n            content='About Us'\n            onClick={() => history.push('/about-team')}\n            name='aboutUs'/>             */}\n          {/* <Menu.Menu position='left'>\n            <Menu.Item as='a' header>\n              <Image size='mini' src='https://dph.georgia.gov/themes/custom/ga_forest/orchard/assets/images/icons/logo/ga-logo--gold.svg' />\n            </Menu.Item>\n          </Menu.Menu> */}\n        </Container>\n      </Menu>\n    </ErrorBoundary>\n  );\n}\n\n\n\n","\nimport React, {\n  createContext,\n  useMemo,\n  useCallback,\n} from \"react\"\nimport PropTypes from \"prop-types\"\nimport * as d3Geo from \"d3-geo\"\n\nconst { geoPath, ...projections } = d3Geo\n\nconst MapContext = createContext()\n\nconst makeProjection = ({\n  projectionConfig = {},\n  projection = \"geoEqualEarth\",\n  width = 800,\n  height = 600,\n  offsetX = 0,\n  offsetY = 0\n}) => {\n  const isFunc = typeof projection === \"function\"\n\n  if (isFunc) return projection\n\n  const scl = projectionConfig.scale || null;\n\n  let proj = projections[projection]().translate([width/2 + (offsetX)*scl/1000 ,\n                                              height/2 +(offsetY)*scl/1000]);\n\n  const supported = [\n    proj.center ? \"center\" : null,\n    proj.rotate ? \"rotate\" : null,\n    proj.scale ? \"scale\" : null,\n    proj.parallels ? \"parallels\" : null,\n  ]\n\n  supported.forEach(d => {\n    if (!d) return\n    proj = proj[d](projectionConfig[d] || proj[d]())\n  })\n\n  return proj\n}\n\nconst MapProvider = ({\n  width,\n  height,\n  offsetX,\n  offsetY,\n  projection,\n  projectionConfig,\n  ...restProps\n}) => {\n  const [cx, cy] = projectionConfig.center || []\n  const [rx, ry, rz] = projectionConfig.rotate || []\n  const [p1, p2] = projectionConfig.parallels || []\n  const s = projectionConfig.scale || null\n\n  const projMemo = useMemo(() => {\n    return makeProjection({\n      projectionConfig: {\n        center: (cx || cx === 0) || (cy || cy === 0) ? [cx, cy] : null,\n        rotate: (rx || rx === 0) || (ry || ry === 0) ? [rx, ry, rz] : null,\n        parallels: (p1 || p1 === 0) || (p2 || p2 === 0) ? [p1, p2] : null,\n        scale: s,\n      },\n      projection,\n      width,\n      height,\n      offsetX,\n      offsetY,\n    })\n  }, [ width, height, projection, cx, cy, rx, ry, rz, p1, p2, s, offsetX, offsetY ])\n\n  const proj = useCallback(projMemo, [projMemo])\n\n  const value = useMemo(() => {\n    return {\n      width,\n      height,\n      projection: proj,\n      path: geoPath().projection(proj),\n    }\n  }, [ width, height, proj ])\n\n  return (<MapContext.Provider value={value} {...restProps} />)\n}\n\nMapProvider.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  offsetX: PropTypes.number,\n  offsetY: PropTypes.number,\n  projection: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.func,\n  ]),\n  projectionConfig: PropTypes.object,\n}\n\nexport { MapProvider, MapContext }\n","\nimport { feature } from \"topojson-client\"\n\nexport function getCoords(w, h, t) {\n  const xOffset = (w * t.k - w) / 2\n  const yOffset = (h * t.k - h) / 2\n  return [w / 2 - (xOffset + t.x) / t.k, h / 2 - (yOffset + t.y) / t.k]\n}\n\nexport function fetchGeographies(url) {\n  return fetch(url)\n    .then(res => {\n      if (!res.ok) {\n        throw Error(res.statusText)\n      }\n      return res.json()\n    }).catch(error => {\n      console.log(\"There was a problem when fetching the data: \", error)\n    })\n}\n\nexport function getFeatures(geographies, parseGeographies) {\n  if (Array.isArray(geographies)) return parseGeographies ? parseGeographies(geographies) : geographies\n  const feats = feature(\n    geographies,\n    geographies.objects[Object.keys(geographies.objects)[0]]\n  ).features\n  return parseGeographies ? parseGeographies(feats) : feats\n}\n\nexport function prepareFeatures(geographies, path) {\n  return geographies ? geographies.map((d, i) => {\n    return {\n      ...d,\n      rsmKey: `geo-${i}`,\n      svgPath: path(d),\n    }\n  }) : []\n}\n\nexport function createConnectorPath(dx = 30, dy = 30, curve = 0.5) {\n  const curvature = Array.isArray(curve) ? curve : [curve, curve]\n  const curveX = dx / 2 * curvature[0]\n  const curveY = dy / 2 * curvature[1]\n  return `M${0},${0} Q${-dx / 2 - curveX},${-dy / 2 + curveY} ${-dx},${-dy}`\n}\n\nexport function isString(geo) { return typeof geo === \"string\" }\n","\nimport { useMemo, useState, useEffect, useContext } from \"react\"\nimport { MapContext } from \"./MapProvider\"\n\nimport { fetchGeographies, getFeatures, prepareFeatures, isString } from \"../utils\"\n\nexport default function useGeographies({ geography, parseGeographies }) {\n  const { path } = useContext(MapContext)\n  const [geographies, setGeographies] = useState()\n\n  useEffect(() => {\n    if (typeof window === `undefined`) return\n\n    if (isString(geography)) {\n      fetchGeographies(geography).then(geos => {\n        if (geos) setGeographies(getFeatures(geos, parseGeographies))\n      })\n    } else {\n      setGeographies(getFeatures(geography, parseGeographies))\n    }\n  }, [geography, parseGeographies])\n\n  const output = useMemo(() => {\n    return prepareFeatures(geographies, path)\n  }, [geographies, path])\n\n  return { geographies: output }\n}\n","\nimport React, { useContext } from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport { MapContext } from \"./MapProvider\"\nimport useGeographies from \"./useGeographies\"\n\nconst Geographies = ({\n  geography,\n  children,\n  parseGeographies,\n  className = \"\",\n  ...restProps\n}) => {\n  const { path, projection } = useContext(MapContext)\n  const { geographies } = useGeographies({ geography, parseGeographies })\n  // console.log(geographies)\n\n  return (\n    <g className={`rsm-geographies ${className}`} {...restProps}>\n      {\n        geographies && geographies.length > 0 &&\n        children({ geographies, path, projection })\n        \n      }\n    </g>\n  )\n}\n\nGeographies.propTypes = {\n  geography: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.object,\n    PropTypes.array,\n  ]),\n  children: PropTypes.func,\n  parseGeographies: PropTypes.func,\n  className: PropTypes.string,\n}\n\nexport default Geographies\n","\nimport React, { useState, memo } from \"react\"\nimport PropTypes from \"prop-types\"\n\nconst Geography = ({\n  geography,\n  onMouseEnter,\n  onMouseLeave,\n  onMouseDown,\n  onMouseUp,\n  onFocus,\n  onBlur,\n  style = {},\n  className = \"\",\n  ...restProps\n}) => {\n  const [isPressed, setPressed] = useState(false)\n  const [isFocused, setFocus] = useState(false)\n\n  function handleMouseEnter(evt) {\n    setFocus(true)\n    if (onMouseEnter) onMouseEnter(evt)\n    // console.log(onMouseEnter)\n  }\n\n  function handleMouseLeave(evt) {\n    setFocus(false)\n    if (isPressed) setPressed(false)\n    if (onMouseLeave) onMouseLeave(evt)\n  }\n\n  function handleFocus(evt) {\n    setFocus(true)\n    if (onFocus) onFocus(evt)\n  }\n\n  function handleBlur(evt) {\n    setFocus(false)\n    if (isPressed) setPressed(false)\n    if (onBlur) onBlur(evt)\n  }\n\n  function handleMouseDown(evt) {\n    setPressed(true)\n    if (onMouseDown) onMouseDown(evt)\n  }\n\n  function handleMouseUp(evt) {\n    setPressed(false)\n    if (onMouseUp) onMouseUp(evt)\n  }\n\n  return (\n    <path\n      tabIndex=\"0\"\n      className={`rsm-geography ${className}`}\n      d={geography.svgPath}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      onFocus={handleFocus}\n      onBlur={handleBlur}\n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n      style={style[isPressed || isFocused ? (isPressed ? \"pressed\" : \"hover\") : \"default\"]}\n      {...restProps}\n    />\n  )\n}\n\nGeography.propTypes = {\n  geography: PropTypes.object,\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  onMouseDown: PropTypes.func,\n  onMouseUp: PropTypes.func,\n  onFocus: PropTypes.func,\n  onBlur: PropTypes.func,\n  style: PropTypes.object,\n  className: PropTypes.string,\n}\n\nexport default memo(Geography)\n","\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport { MapProvider } from \"./MapProvider\"\n\nconst ComposableMap = ({\n  width = 800,\n  height = 600,\n  offsetX = 0,\n  offsetY = 0,\n  projection = \"geoEqualEarth\",\n  projectionConfig = {},\n  className = \"\",\n  ...restProps\n}) => {\n  return (\n    <MapProvider\n      width={width}\n      height={height}\n      offsetX={offsetX}\n      offsetY={offsetY}\n      projection={projection}\n      projectionConfig={projectionConfig}\n    >\n      <svg\n        width={width}\n        height={height}\n        className={`rsm-svg ${className}`}\n        {...restProps}\n      />\n    </MapProvider>\n  )\n}\n\nComposableMap.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  projection: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.func,\n  ]),\n  projectionConfig: PropTypes.object,\n  className: PropTypes.string,\n}\n\nexport default ComposableMap\n","import React from 'react'\nimport { Grid, List, Divider, Image } from 'semantic-ui-react'\n\nexport default function Notes(props){\n\n  return (\n    <div style={{paddingTop: '2em', fontWeight: 300}}>\n    {/* <Divider/>\n    <Grid>\n      <Grid.Row>\n        <Grid.Column style={{fontSize: '1em', lineHeight: '1.5em'}}>\n          Early data about COVID-19 suggests that communities are affected very differently due to social determinants of health like population density, poverty, residential segregation, underlying chronic health conditions, and availability of medical services. \n          In order to predict how the epidemic will continue to unfold and prepare for the future, it is critical to understand differences in underlying risk factors. \n          There is no one-size-fits all approach to combat the epidemic, but accurate and meaningful data is a key component of a robust public health response that is informed by contextual factors and prioritizes health equity.\n          <br/><br/>\n          The COVID-19 Health Equity Dashboard seeks to fill the gaps in county-level data about the virus and underlying social determinants of health. \n          Our goal is for this Dashboard to facilitate easy comparisons of counties with respect to COVID-19 outcomes and social determinants. \n          We hope this becomes a valuable resource for and critical component of tailored public health responses to COVID-19 across the wide range of environments that Americans inhabit.\n        </Grid.Column>\n      </Grid.Row>\n      <Divider hidden/>\n      <Grid.Row columns={2}>\n        <Grid.Column>          \n          <Image size='small' src='/logo.png' />\n          &copy; 2020 Emory University. All rights reserved.\n        </Grid.Column>\n        <Grid.Column>          \n          <small>\n            This dashboard is created using\n            <List as='ol'>\n              <List.Item as='li' value='-'><a href=\"https://www.react-simple-maps.io/\">React Simple Maps</a> by <a href=\"https://www.zcreativelabs.com/\">z creative labs</a></List.Item>\n              <List.Item as='li' value='-'><a href=\"https://formidable.com/open-source/victory/\">Victory</a> by <a href=\"https://formidable.com/\">Formidable</a></List.Item>\n              <List.Item as='li' value='-'><a href=\"https://github.com/Semantic-Org/Semantic-UI-React\">Semantic UI React</a> by <a href=\"https://github.com/levithomason\">@levithomason</a>and an amazing community of <a href=\"https://github.com/Semantic-Org/Semantic-UI-React/graphs/contributors\">contributors</a></List.Item> \n              <List.Item as='li' value='-'><a href=\"https://github.com/facebook/create-react-app\">Create React App</a> by <a href=\"https://about.fb.com/company-info/\">Facebook</a></List.Item> \n            </List>\n          </small>\n        </Grid.Column>\n      </Grid.Row>\n    </Grid> */}\n    </div>);\n}\n","import React, { useEffect, useState } from 'react'\r\nimport { Container, Grid, Breadcrumb, Dropdown, Header, Loader, Divider } from 'semantic-ui-react'\r\nimport AppBar from './AppBar';\r\nimport Geographies from './Geographies';\r\nimport Geography from './Geography';\r\nimport ComposableMap from './ComposableMap';\r\nimport {\r\n    VictoryChart,\r\n    VictoryTooltip,\r\n    VictoryVoronoiContainer,\r\n    VictoryContainer,\r\n    VictoryGroup,\r\n    VictoryBar,\r\n    VictoryTheme,\r\n    VictoryAxis,\r\n    VictoryLegend,\r\n    VictoryLine,\r\n    VictoryLabel,\r\n    VictoryScatter,\r\n    VictoryPie,\r\n} from 'victory';\r\nimport Slider from \"@material-ui/core/Slider\";\r\n\r\n\r\nimport { useParams, useHistory } from 'react-router-dom';\r\nimport Notes from './Notes';\r\nimport ReactTooltip from \"react-tooltip\";\r\nimport _ from 'lodash';\r\nimport { scaleQuantile, scaleLinear } from \"d3-scale\";\r\nimport { quantile, ascending } from 'd3';\r\nimport fips2county from './fips2county.json'\r\nimport configscounty from \"./county_config.json\";\r\n\r\nimport configs from \"./state_config.json\";\r\n\r\n\r\nconst colorPalette = [\r\n    \"#e1dce2\",\r\n    \"#d3b6cd\",\r\n    \"#bf88b5\",\r\n    \"#af5194\",\r\n    \"#99528c\",\r\n    \"#633c70\",\r\n];\r\nconst colorPalette1 = [\r\n    \"#67335E\",\r\n    \"#6B2A4D\",\r\n    \"#70213B\",\r\n    \"#74182A\",\r\n    '#7d0707'\r\n];\r\n\r\nconst colorOut = '#7d0707';\r\n\r\nconst countyColor = '#f2a900';\r\nconst stateColor = '#bdbfc1';\r\nconst nationColor = '#d9d9d7';\r\nconst colorHighlight = '#f2a900';\r\nconst marks = [\r\n    {\r\n        value: 0,\r\n        label: 'Mar 1',\r\n    },\r\n    {\r\n        value: 10,\r\n        label: 'April 1',\r\n    },\r\n    {\r\n        value: 20,\r\n        label: 'May 1',\r\n    },\r\n    {\r\n        value: 30,\r\n        label: 'June 1',\r\n    },\r\n];\r\n\r\nfunction valuetext(value) {\r\n    return `${value}°C`;\r\n}\r\n\r\nfunction SvgMap(props) {\r\n    var lengthSplit1 = props.lengthSplit1;\r\n    if (props.name === 'casescum') {\r\n        return (\r\n            <svg width=\"500\" height=\"55\">\r\n                {_.map(colorPalette, (color, i) => {\r\n                    return <rect key={i} x={50 + 25 * i} y={20} width=\"25\" height=\"20\" style={{ fill: color, strokeWidth: 1, stroke: color }} />\r\n                })}\r\n                {_.map(colorPalette1, (color, i) => {\r\n                    return <rect key={i} x={200 + 25 * i} y={20} width=\"25\" height=\"20\" style={{ fill: color, strokeWidth: 1, stroke: color }} />\r\n                })}\r\n\r\n                {/* <rect x={180} y={20} width=\"25\" height=\"20\" style={{ fill: colorOut, strokeWidth: 1, stroke: colorOut }} /> */}\r\n                <text x={50} y={52} style={{ fontSize: '0.8em' }}>Low</text>\r\n                <text x={300} y={52} style={{ fontSize: '0.8em' }}>High</text>\r\n                {_.map(props.legendSplit, (splitpoint, i) => {\r\n                    if (props.legendSplit[i] < 1) {\r\n                        return <text key={i} x={57 + 25 * (i)} y={15} style={{ fontSize: '0.7em' }}> {props.legendSplit[i].toFixed(1)}</text>\r\n                    }\r\n                    if (props.legendSplit[i] >= 1000) {\r\n                        return <text key={i} x={70 + 25 * (i)} y={15} style={{ fontSize: '0.7em' }}> {(props.legendSplit[i] / 1000).toFixed(1) + \"K\"}</text>\r\n                    }\r\n                    return <text key={i} x={70 + 25 * (i)} y={15} style={{ fontSize: '0.7em' }}> {props.legendSplit[i].toFixed(0)}</text>\r\n                })}\r\n\r\n                {_.map(props.legendSplit1, (splitpoint, i) => {\r\n                    if (props.legendSplit1[i] >= 1000) {\r\n                        return <text key={i} x={220 + 25 * (i)} y={15} style={{ fontSize: '0.7em' }}> {(props.legendSplit1[i] / 1000).toFixed(1) + \"K\"}</text>\r\n                    }\r\n                    return <text key={i} x={220 + 25 * (i)} y={15} style={{ fontSize: '0.7em' }}> {props.legendSplit1[i].toFixed(0)}</text>\r\n                })}\r\n\r\n                <text x={50} y={15} style={{ fontSize: '0.7em' }}> {(props.legendMin / 100).toFixed(0)} </text>\r\n                <rect x={5} y={20} width=\"25\" height=\"20\" style={{ fill: \"#FFFFFF\", strokeWidth: 0.5, stroke: \"#000000\" }} />\r\n                <text x={8} y={52} style={{ fontSize: '0.7em' }}> N/A </text>\r\n            </svg>\r\n\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <svg width=\"500\" height=\"55\">\r\n                {_.map(colorPalette, (color, i) => {\r\n                    return <rect key={i} x={55 + 25 * i} y={20} width=\"25\" height=\"20\" style={{ fill: color, strokeWidth: 1, stroke: color }} />\r\n                })}\r\n\r\n                <rect x={230} y={20} width=\"25\" height=\"20\" style={{ fill: colorOut, strokeWidth: 1, stroke: colorOut }} />\r\n                <text x={55} y={52} style={{ fontSize: '0.8em' }}>Low</text>\r\n                <text x={230} y={52} style={{ fontSize: '0.8em' }}>High</text>\r\n                {_.map(props.legendSplit, (splitpoint, i) => {\r\n                    if (props.legendSplit[i] < 1) {\r\n                        return <text key={i} x={62 + 25 * (i)} y={15} style={{ fontSize: '0.7em' }}> {props.legendSplit[i].toFixed(1)}</text>\r\n                    }\r\n                    if (props.legendSplit[i] >= 1000) {\r\n                        return <text key={i} x={72 + 25 * (i)} y={15} style={{ fontSize: '0.7em' }}> {(props.legendSplit[i] / 1000).toFixed(1) + \"K\"}</text>\r\n                    }\r\n                    return <text key={i} x={72 + 25 * (i)} y={15} style={{ fontSize: '0.7em' }}> {props.legendSplit[i].toFixed(0)}</text>\r\n                })}\r\n                {props.legendMin < 100 ? <text x={55} y={15} style={{ fontSize: '0.7em' }}> {(props.legendMin / 1).toFixed(0)} </text> :\r\n                    <text x={47} y={15} style={{ fontSize: '0.7em' }}> {(props.legendMin / 1).toFixed(0)} </text>\r\n                }\r\n\r\n\r\n\r\n                <text x={224} y={15} style={{ fontSize: '0.7em' }}>{props.legendSplit[colorPalette.length - 1] < 1 ? props.legendSplit[colorPalette.length - 1].toFixed(1)\r\n                    : props.legendSplit[colorPalette.length - 1] > 1000 ?\r\n                        (props.legendSplit[colorPalette.length - 1] / 1000).toFixed(1) + \"K\" : props.legendSplit[colorPalette.length - 1].toFixed(0)\r\n                }</text>\r\n                <text x={251} y={15} style={{ fontSize: '0.7em' }}>{props.legendMax}</text>\r\n                <rect x={5} y={20} width=\"25\" height=\"20\" style={{ fill: \"#FFFFFF\", strokeWidth: 0.5, stroke: \"#000000\" }} />\r\n                <text x={8} y={52} style={{ fontSize: '0.7em' }}> N/A </text>\r\n\r\n                {/* <text x={250} y={42} style={{fontSize: '0.8em'}}> Click on a county below </text>\r\n          <text x={250} y={52} style={{fontSize: '0.8em'}}> for a detailed report. </text> */}\r\n            </svg>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nfunction ChartGraph(props) {\r\n    var varGraphPair = props.name;\r\n    var dataTS;\r\n    var metric = props.metric;\r\n    var stateFips = props.stateFips;\r\n    var countyFips = props.countyFips;\r\n\r\n    if (props.metric === \"casescum14dayR\") {\r\n        dataTS = props.data1;\r\n\r\n        return (\r\n            <VictoryChart theme={VictoryTheme.material}\r\n                containerComponent={\r\n                    <VictoryVoronoiContainer\r\n                        voronoiBlacklist={[\"Line1\", \"Line14\"]}\r\n                        labels={({ datum }) => `${new Date(datum.t * 1000).toLocaleDateString()}\\n` + `${varGraphPair[metric]['legend'][0]}: \r\n                    ${Math.round(datum[varGraphPair[metric]['name'][0]], 2)}\\n` + `${varGraphPair[metric]['legend'][1]}:${Math.round(datum[varGraphPair[metric]['name'][1]], 2)}`}\r\n                        labelComponent={\r\n                            <VictoryTooltip dy={-7} constrainToVisibleArea\r\n                                style={{ fontSize: 15 }} />\r\n                        }\r\n                    />\r\n                }\r\n                width={730}\r\n                height={550}\r\n                padding={{ left: 55, right: 70, top: 10, bottom: 50 }}>\r\n                <VictoryAxis\r\n                    style={{\r\n                        tickLabels: { fontSize: 25, padding: 5 }\r\n                    }}\r\n                    tickFormat={(t) => new Date(t * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric' })}\r\n\r\n                    tickValues={[\r\n                        dataTS[dataTS.length - Math.round(dataTS.length / 4) * 3 - 1].t,\r\n                        dataTS[dataTS.length - Math.round(dataTS.length / 4) * 2 - 1].t,\r\n                        dataTS[dataTS.length - Math.round(dataTS.length / 4) - 1].t,\r\n                        dataTS[dataTS.length - 1].t]}\r\n\r\n                />\r\n                <VictoryAxis dependentAxis tickCount={5}\r\n                    style={{\r\n                        tickLabels: { fontSize: 25, padding: 5 }\r\n                    }}\r\n                    tickFormat={(y) => (y < 1000 ? y : (y / 1000 + 'k'))}\r\n                />\r\n                <VictoryBar style={{ data: { fill: stateColor } }} barWidth={8} alignment=\"start\" data={dataTS ? dataTS : props.data2[\"99999\"]}\r\n                    x='t' y={varGraphPair[metric]['name'][0]}\r\n                />\r\n                <VictoryLine name=\"Line1\" style={{ data: { stroke: countyColor, strokeWidth: 5 } }} data={dataTS ? dataTS : props.data2[\"99999\"]}\r\n                    x='t' y={varGraphPair[metric]['name'][1]}\r\n                />\r\n                {varGraphPair[metric]['name'][1] === 'casesdailymean7' || varGraphPair[metric]['name'][1] === 'deathsdailymean7' ?\r\n                    <VictoryAxis dependentAxis tickCount={5}\r\n                        style={{\r\n                            tickLabels: { fontSize: 25, padding: 5 }\r\n                        }}\r\n                        tickFormat={(y) => (y < 1000 ? y : (y / 1000 + 'k'))}\r\n                    /> :\r\n                    <VictoryLine name=\"Line11\" style={{ data: { stroke: '#71c7ec', strokeWidth: 3 } }} data={_.takeRight(props.data2[stateFips], 14) ? _.takeRight(props.data2[stateFips], 14) : props.data2[\"99999\"]}\r\n                        x='t' y={varGraphPair[metric]['name'][1]} />}\r\n            </VictoryChart>)\r\n    }\r\n    else {\r\n        dataTS = props.data2;\r\n        return (\r\n            <VictoryChart theme={VictoryTheme.material}\r\n                containerComponent={\r\n                    <VictoryVoronoiContainer\r\n                        voronoiBlacklist={[\"Line1\", \"Line14\"]}\r\n                        labels={({ datum }) => `${new Date(datum.t * 1000).toLocaleDateString()}\\n` + `${varGraphPair[metric]['legend'][0]}: ${Math.round(datum[varGraphPair[metric]['name'][0]], 2)}\\n` + `${varGraphPair[metric]['legend'][1]}:${Math.round(datum[varGraphPair[metric]['name'][1]], 2)}`}\r\n                        labelComponent={\r\n                            <VictoryTooltip dy={-7} constrainToVisibleArea\r\n                                style={{ fontSize: 15 }} />\r\n                        }\r\n                    />\r\n                }\r\n                width={730}\r\n                height={550}\r\n                padding={{ left: 55, right: 70, top: 10, bottom: 50 }}>\r\n                <VictoryAxis\r\n                    style={{\r\n                        tickLabels: { fontSize: 25, padding: 5 }\r\n                    }}\r\n                    tickFormat={(t) => new Date(t * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric' })}\r\n                    tickValues={[\r\n                        1583035200, 1585713600, 1588305600, 1590984000, 1593576000\r\n                    ]}\r\n                // tickValues={[\r\n                //   dataTS[stateFips + countyFips][dataTS[stateFips + countyFips].length - Math.round(dataTS[stateFips + countyFips].length / 4) * 3 - 1].t,\r\n                //   dataTS[stateFips + countyFips][dataTS[stateFips + countyFips].length - Math.round(dataTS[stateFips + countyFips].length / 4) * 2 - 1].t,\r\n                //   dataTS[stateFips + countyFips][dataTS[stateFips + countyFips].length - Math.round(dataTS[stateFips + countyFips].length / 4) - 1].t,\r\n                //   dataTS[stateFips + countyFips][dataTS[stateFips + countyFips].length - 1].t]} \r\n\r\n\r\n                />\r\n                <VictoryAxis dependentAxis tickCount={5}\r\n                    style={{\r\n                        tickLabels: { fontSize: 25, padding: 5 }\r\n                    }}\r\n                    tickFormat={(y) => (y < 1000 ? y : (y / 1000 + 'k'))}\r\n                />\r\n                <VictoryBar style={{ data: { fill: stateColor } }} barWidth={4} data={dataTS[stateFips + countyFips] ? dataTS[stateFips + countyFips] : dataTS[\"99999\"]}\r\n                    x='t' y={varGraphPair[metric]['name'][0]}\r\n                />\r\n                <VictoryLine name=\"Line1\" style={{ data: { stroke: countyColor, strokeWidth: 5 } }} data={dataTS[stateFips + countyFips] ? dataTS[stateFips + countyFips] : dataTS[\"99999\"]}\r\n                    x='t' y={varGraphPair[metric]['name'][1]}\r\n                />\r\n                {varGraphPair[metric]['name'][1] === 'casesdailymean7' || varGraphPair[metric]['name'][1] === 'deathsdailymean7' ?\r\n                    <VictoryAxis dependentAxis tickCount={5}\r\n                        style={{\r\n                            tickLabels: { fontSize: 25, padding: 5 }\r\n                        }}\r\n                        tickFormat={(y) => (y < 1000 ? y : (y / 1000 + 'k'))}\r\n                    /> :\r\n                    <VictoryLine name=\"Line11\" style={{ data: { stroke: '#71c7ec', strokeWidth: 3 } }} data={dataTS[stateFips] ? dataTS[stateFips] : dataTS[\"99999\"]}\r\n                        x='t' y={varGraphPair[metric]['name'][1]} />}\r\n                {/* <VictoryLine name=\"Line14\" style={{ data: { stroke: 'red', strokeDasharray: \"5,5\" } }} data={[{ x: covidMetric14.t, y: 0 }, { x: covidMetric14.t, y: legendMax_graph[stateFips + countyFips] }]}\r\n                          /> */}\r\n                {/* <VictoryLine name=\"Line14\"\r\n                            style={{ data: { stroke: 'red', strokeDasharray: \"5,5\" } }}\r\n                            x={() => covidMetric14.t}\r\n                          /> */}\r\n            </VictoryChart>)\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default function StateMap(props) {\r\n\r\n    // let { stateFips } = useParams();\r\n    const hig = '80';\r\n    const stateFips = '13';\r\n    const [config, setConfig] = useState();\r\n    const [stateName, setStateName] = useState('');\r\n\r\n    const [countyFips, setCountyFips] = useState('121');\r\n    const [countyName, setCountyName] = useState('Fulton County');\r\n    const history = useHistory();\r\n    const [fips, setFips] = useState('13');\r\n\r\n    // const [dataFltrd, setDataFltrd] = useState();\r\n    // const [dataFltrdUs, setDataFltrdUs] = useState();\r\n\r\n    // const [dataStateFltrd, setDataStateFltrd] = useState();\r\n    // const [dataState, setDataState] = useState();\r\n\r\n    const [data, setData] = useState();\r\n    const [dataUs, setDataUs] = useState();\r\n\r\n    const [dateCur, setDateCur] = useState();\r\n    const [topTen, setTopTen] = useState([]);\r\n    // const [stateLabels, setStateLabels] = useState();\r\n    const [covidMetric, setCovidMetric] = useState({ casesdaily: 'N/A', casesdailymean14: 'N/A', t: 'n/a' });\r\n    const [covidMetric14, setCovidMetric14] = useState({ casesdaily: 'N/A', casesdailymean14: 'N/A', t: 'n/a' });\r\n\r\n    const [dataTS, setDataTS] = useState();\r\n    const [tooltipContent, setTooltipContent] = useState('');\r\n    const [colorScale, setColorScale] = useState();\r\n\r\n    const [legendMax, setLegendMax] = useState([]);\r\n    const [legendMin, setLegendMin] = useState([]);\r\n    const [legendMax_graph, setLegendMaxGraph] = useState({});\r\n    const [legendSplit, setLegendSplit] = useState([]);\r\n    const [legendSplit1, setLegendSplit1] = useState([]);\r\n\r\n    const [metric, setMetric] = useState('casescumR');\r\n    const [metric_graph, setMetricGraph] = useState(['casesdaily', 'casesdailymean14']);\r\n\r\n    const metricOptions1 = [{ key: 'cacum', value: 'casescum', text: 'Total COVID-19 cases' },\r\n    { key: 'decum', value: 'deathscum', text: 'Total COVID-19 deaths' },\r\n    { key: 'cacumr', value: 'casescumR', text: 'COVID-19 cases per 100,000 population' },\r\n    { key: 'decumr', value: 'deathscumR', text: 'COVID-19 deaths per 100,000 population' },\r\n    { key: 'cacum14R', value: 'casescum14dayR', text: 'Last two weeks cases per 100,000 population' }];\r\n\r\n    const metricOptions2 = [{ key: 'cs', value: 'cs', text: 'Confirmed cases per 100,000 population' },\r\n    { key: 'hp', value: 'hp', text: 'Hospitalizations per 100,000 population' },\r\n    { key: 'ds', value: 'ds', text: 'Deaths per 100,000 population' }];\r\n    const dropdownopt = {\r\n        'casescum': 'Total COVID-19 cases', 'deathscum': 'Total COVID-19 deaths',\r\n        'casescumR': 'COVID-19 cases per 100,000 population', 'deathscumR': 'COVID-19 deaths per 100,000 population'\r\n    };\r\n\r\n    const varGraphPair = {\r\n        \"casescum\": { \"name\": ['casesdaily', 'casesdailymean7'], \"legend\": ['Daily cases', '7-d rolling average '] },\r\n        \"deathscum\": { \"name\": ['deathsdaily', 'deathsdailymean7'], \"legend\": ['Daily deaths', '7-d rolling average '] },\r\n        \"casescumR\": { \"name\": ['casesdailyR', 'casesdailymean7R'], \"legend\": ['Daily cases per 100,000', '7-d rolling average'] },\r\n        \"deathscumR\": { \"name\": ['deathsdailyR', 'deathsdailymean7R'], \"legend\": ['Daily deaths per 100,000', '7-d rolling average'] },\r\n        \"casescum14dayR\": { \"name\": ['casesdailyR', 'casesdailymean7R'], \"legend\": ['Last 14 days cases per 100,000', '7-d rolling average'] }\r\n    };\r\n    const [metricName, setMetricName] = useState('COVID-19 cases per 100,000 population');\r\n    const varNameMap = {\r\n        \"casescum\": { \"name\": 'cases', \"text\": \"The map shows the total number of confirmed COVID-19 cases in each county as of \" },\r\n        \"casescum14dayR\": { \"name\": 'cases per 100,000 residents', \"text\": \"The map shows the number of confirmed COVID-19 cases for past two weeks in each county as of \" },\r\n        \"deathscum\": { \"name\": 'deaths', \"text\": \"The map shows the total number of confirmed COVID-19 deaths in each county as of \" },\r\n        \"casescumR\": { \"name\": 'cases per 100,000 residents', \"text\": \"The map shows the total number of confirmed COVID-19 cases per 100,000 residents in each county as of \" },\r\n        \"deathscumR\": { \"name\": 'deaths per 100,000 residents', \"text\": \"The map shows the total number of confirmed COVID-19 deaths per 100,000 residents in each county as of \" }\r\n    };\r\n    const varMap = { \"cacum\": metricOptions2[0], \"decum\": metricOptions2[1], \"cacumr\": metricOptions2[2], \"decumr\": metricOptions1[1] };\r\n    const [delayHandler, setDelayHandler] = useState(null)\r\n\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        const configMatched = configs.find(s => s.fips === stateFips);\r\n        // console.log(configMatched.fips);\r\n        if (!configMatched) {\r\n            history.push('/');\r\n        } else {\r\n\r\n            setConfig(configMatched);\r\n            // console.log(countyFips);\r\n            setStateName(configMatched.name);\r\n\r\n            fetch('/data/data.json').then(res => res.json())\r\n                .then(x => {\r\n                    setData(x);\r\n                    setDataUs(x);\r\n                    if (metric === 'casescum') {\r\n\r\n                        _.map(x, (d, k) => {\r\n                            d.fips = k\r\n                            return d\r\n                        });\r\n                        var temp_Data_metric = [];\r\n                        // retrieve metric data as list\r\n                        _.each(x, d => {\r\n                            if (d.fips.length === 5 && d.fips[0] === '1' && d.fips[1] === '3') {\r\n                                temp_Data_metric.push(d[metric]);\r\n                            }\r\n                        });\r\n\r\n                        temp_Data_metric.sort(function (a, b) {\r\n                            return a - b;\r\n                        });\r\n                        var countIqr = 3 * quantile(temp_Data_metric, 0.75) - 2 * quantile(temp_Data_metric, 0.25);\r\n                        // console.log(temp_Data_metric);\r\n                        //   var top10 = _.takeRight(temp_Data_metric,10)[0];\r\n\r\n                        //   var belowIqr = _.map(_.filter(temp_Data_metric,\r\n                        //     d => (d<top10\r\n                        //       )),\r\n                        //     d => d);\r\n                        // console.log(belowTop)\r\n                        var belowIqr = _.map(_.filter(temp_Data_metric,\r\n                            d => (d < countIqr\r\n                            )),\r\n                            d => d);\r\n\r\n                        var upIqr = _.map(_.filter(temp_Data_metric,\r\n                            d => (d >= countIqr\r\n                            )),\r\n                            d => d);\r\n\r\n                        var split = scaleQuantile()\r\n                            .domain(belowIqr).range(colorPalette);\r\n                        var split1 = scaleQuantile()\r\n                            .domain(upIqr).range(colorPalette1);\r\n                        console.log(split.quantiles())\r\n                        console.log(split1.quantiles())\r\n\r\n\r\n                        var thr = [];\r\n                        var thr1 = [];\r\n                        for (i = 0; i < split1.quantiles().length; i++) {\r\n                            thr1[i] = split1.quantiles()[i];\r\n                        }\r\n                        thr1.push(_.takeRight(temp_Data_metric)[0]);\r\n\r\n                        for (i = 0; i < split.quantiles().length; i++) {\r\n                            thr[i] = split.quantiles()[i];\r\n                        }\r\n                        thr.push(Math.round(countIqr / 100) * 100);\r\n\r\n                        console.log(thr1);\r\n                        var i;\r\n                        for (i = 0; i < thr.length; i++) {\r\n                            if (thr[i] < 100) {\r\n                                thr[i] = Math.round(thr[i] / 10) * 10;\r\n                            }\r\n                            else {\r\n                                thr[i] = Math.round(thr[i] / 100) * 100;\r\n                            }\r\n                        }\r\n                        for (i = 0; i < thr1.length; i++) {\r\n                            if (thr1[i] < 100) {\r\n                                thr1[i] = Math.floor(thr1[i] / 10) * 10;\r\n                            }\r\n                            else {\r\n                                thr1[i] = Math.floor(thr1[i] / 100) * 100;\r\n                            }\r\n\r\n                        }\r\n                        console.log(thr1)\r\n\r\n                        const csUs = {};\r\n                        var indexColor;\r\n                        _.map(belowIqr, d => {\r\n                            if (d >= 0 && d <= thr[0]) {\r\n                                csUs[d] = colorPalette[0];\r\n                            };\r\n                            if (d > thr[0] && d <= thr[1]) {\r\n                                csUs[d] = colorPalette[1];\r\n                            }\r\n                            if (d > thr[1] && d <= thr[2]) {\r\n                                csUs[d] = colorPalette[2];\r\n                            }\r\n                            if (d > thr[2] && d <= thr[3]) {\r\n                                csUs[d] = colorPalette[3];\r\n                            }\r\n                            if (d > thr[3] && d <= thr[4]) {\r\n                                csUs[d] = colorPalette[4];\r\n                            }\r\n                            if (d > thr[4] && d <= thr[5]) {\r\n                                csUs[d] = colorPalette[5];\r\n                            }\r\n                        });\r\n\r\n                        _.map(upIqr, d => {\r\n                            if (d > thr[5] && d <= thr1[0]) {\r\n                                csUs[d] = colorPalette1[0];\r\n                            }\r\n                            if (d > thr1[0] && d <= thr1[1]) {\r\n                                csUs[d] = colorPalette1[1];\r\n                            }\r\n                            if (d > thr1[1] && d <= thr1[2]) {\r\n                                csUs[d] = colorPalette1[2];\r\n                            }\r\n                            if (d > thr1[2] && d <= thr1[3]) {\r\n                                csUs[d] = colorPalette1[3];\r\n                            }\r\n                            if (d > thr1[3] && d <= thr1[4]) {\r\n                                csUs[d] = colorPalette1[4];\r\n                            }\r\n                        })\r\n                        let scaleMap = csUs;\r\n\r\n                        setColorScale(scaleMap);\r\n\r\n                        var max = _.takeRight(temp_Data_metric)[0];\r\n                        var min = temp_Data_metric[0];\r\n                        console.log(max);\r\n                        if (max > 999) {\r\n                            max = (max / 1000).toFixed(0) + \"K\";\r\n                            console.log(max);\r\n                            setLegendMax(max);\r\n                        } else {\r\n                            setLegendMax(max.toFixed(0));\r\n\r\n                        }\r\n                        setLegendMin(min.toFixed(0));\r\n\r\n                        setLegendSplit(thr);\r\n                        setLegendSplit1(thr1);\r\n\r\n                    }\r\n                    else {\r\n                        _.map(x, (d, k) => {\r\n                            d.fips = k\r\n                            return d\r\n                        });\r\n\r\n                        var temp_Data = {};\r\n                        var temp_Data_metric = [];\r\n                        // retrieve metric data as list\r\n                        _.each(x, d => {\r\n                            if (d.fips.length === 5 && d.fips[0] === '1' && d.fips[1] === '3') {\r\n                                temp_Data_metric.push(d[metric]);\r\n                            }\r\n                        });\r\n                        temp_Data[metric] = temp_Data_metric;\r\n\r\n                        temp_Data_metric.sort(function (a, b) {\r\n                            return a - b;\r\n                        });\r\n                        console.log(temp_Data_metric);\r\n                        //   console.log(quantile(temp_Data_metric, 0.75));\r\n                        //   console.log(quantile(temp_Data_metric, 0.25));\r\n                        //   console.log(3*quantile(temp_Data_metric, 0.75)-2*quantile(temp_Data_metric, 0.25));\r\n                        // console.log(6*quantile(temp_Data_metric, 0.75)-5*quantile(temp_Data_metric, 0.25))\r\n                        var countIqr = 6 * quantile(temp_Data_metric, 0.75) - 5 * quantile(temp_Data_metric, 0.25);\r\n                        var rateIqr = 3 * quantile(temp_Data_metric, 0.75) - 2 * quantile(temp_Data_metric, 0.25);\r\n                        var IQR3 = _.map(_.filter(_.map(x, (d, k) => {\r\n                            d.fips = k\r\n                            return d\r\n                        }),\r\n                            d => (metric === 'casescumR' || metric === 'deathscumR' ? d[metric] > 0 && d[metric] < rateIqr &&\r\n                                d.fips.length === 5\r\n                                : d[metric] > 0 && d[metric] < countIqr &&\r\n                                d.fips.length === 5\r\n                            )),\r\n                            d => d[metric]);\r\n\r\n                        console.log(IQR3);\r\n\r\n                        const csUs = {};\r\n                        var indexColor;\r\n                        _.map(IQR3, d => {\r\n                            if (metric === 'casescumR' || metric === 'deathscumR' || metric == 'casescum14dayR') { var interV = (rateIqr.toFixed(0)) / colorPalette.length }\r\n                            else { var interV = (countIqr.toFixed(0)) / colorPalette.length }\r\n\r\n                            if (metric === 'deathscum' || metric === 'deathscumR') {\r\n                                indexColor = Math.round(interV / 10) * 10;\r\n                            }\r\n                            else {\r\n                                indexColor = Math.round(interV / 100) * 100;\r\n                            }\r\n                            console.log(indexColor);\r\n                            csUs[d] = colorPalette[Math.floor(d / indexColor)];\r\n                        })\r\n\r\n                        _.map(x, d => {\r\n                            if (d[metric] > indexColor * colorPalette.length) {\r\n                                csUs[d[metric]] = colorOut;\r\n                            }\r\n                            if (d[metric] < indexColor * colorPalette.length && d[metric] > 3 * quantile(temp_Data_metric, 0.75) - 2 * quantile(temp_Data_metric, 0.25).toFixed(0)) {\r\n                                csUs[d[metric]] = colorPalette[colorPalette.length - 1];\r\n                            }\r\n                        })\r\n                        let scaleMap = csUs;\r\n\r\n                        setColorScale(scaleMap);\r\n\r\n                        var max = _.takeRight(temp_Data_metric)[0];\r\n                        var min = temp_Data_metric[0];\r\n                        console.log(max);\r\n                        if (max > 999) {\r\n                            max = (max / 1000).toFixed(0) + \"K\";\r\n                            console.log(max);\r\n                            setLegendMax(max);\r\n                        } else {\r\n                            setLegendMax(max.toFixed(0));\r\n\r\n                        }\r\n                        setLegendMin(min.toFixed(0));\r\n                        var split = [];\r\n                        var i = 0;\r\n                        for (i = 0; i < colorPalette.length; i++) {\r\n                            split.push((i + 1) * indexColor);\r\n                        }\r\n\r\n                        setLegendSplit(split);\r\n                        console.log(split);\r\n\r\n                    }\r\n                });\r\n\r\n            // fetch('/data/timeseries13' + '.json').then(res => res.json())\r\n            //   .then(x => setDataTS(x));\r\n            fetch('/data/timeseries13' + '.json').then(res => res.json())\r\n                .then(\r\n                    x => {\r\n                        setDataTS(x);\r\n                        // var max = 0\r\n                        var dicto = {}\r\n                        for (var key in x) {\r\n                            var max = 0\r\n                            _.each(x[key], m => {\r\n                                if (m[varGraphPair[metric]['name'][0]] > max) {\r\n                                    max = m[varGraphPair[metric]['name'][0]];\r\n                                }\r\n                            });\r\n                            dicto[key] = max;\r\n                            // console.log(varNameMap['cacum'].text);\r\n                        }\r\n                        // console.log(dicto);\r\n                        setLegendMaxGraph(dicto);\r\n                    });\r\n\r\n            fetch('/data/data.json').then(res => res.json())\r\n                .then(x => {\r\n                    setDateCur(x)\r\n                    // console.log(x)\r\n                });\r\n        }\r\n    }, [stateFips, metric]);\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if (dataTS && dataTS[stateFips + countyFips]) {\r\n            setCovidMetric(_.takeRight(dataTS[stateFips + countyFips])[0]);\r\n            setCovidMetric14(_.takeRight(dataTS[stateFips + countyFips], 14));\r\n            // console.log(data[stateFips+countyFips])\r\n            // setDateCur(data[stateFips+countyFips])\r\n        }\r\n    }, [dataTS, countyFips])\r\n\r\n    if (dataTS && dataUs) {\r\n\r\n        return (\r\n            <div>\r\n                <AppBar menu='countyReport' />\r\n                <Container style={{ marginTop: '6em', minWidth: '1260px' }}>\r\n                    {config &&\r\n                        <div>\r\n                            <Breadcrumb>\r\n                                {/* <Breadcrumb.Section link onClick={() => history.push('/')}></Breadcrumb.Section>\r\n            <Breadcrumb.Divider /> */}\r\n                                <Breadcrumb.Section active>{stateName}</Breadcrumb.Section>\r\n                                {/* <Breadcrumb.Divider /> */}\r\n                            </Breadcrumb>\r\n                            <Divider hidden />\r\n                            <Grid columns={16}>\r\n                                <Grid.Column width={7} style={{ paddingLeft: \"2\", paddingLeft: \"1\" }}>\r\n                                    <Header as='h2' style={{ fontWeight: 600 }}>\r\n                                        <Header.Content>\r\n                                            <Dropdown\r\n                                                icon=''\r\n                                                style={{\r\n                                                    background: '#fff',\r\n                                                    fontWeight: 600,\r\n                                                    theme: '#000000',\r\n                                                    width: '520px',\r\n                                                    top: '0em',\r\n                                                    left: '0em',\r\n                                                    text: \"Select\",\r\n                                                    borderTop: 'none',\r\n                                                    borderLeft: '1px solid #FFFFFF',\r\n                                                    borderRight: 'none',\r\n                                                    borderBottom: '0.5px solid #bdbfc1',\r\n                                                    borderRadius: 0,\r\n                                                    minHeight: '1.0em',\r\n                                                    paddingBottom: '0.1em'\r\n                                                }}\r\n                                                text={metricName}\r\n                                                inline\r\n                                                search\r\n                                                pointing='top'\r\n                                                options={metricOptions1}\r\n                                                onChange={(e, { value }) => {\r\n                                                    setMetric(value);\r\n                                                    // console.log(varNameMap);\r\n                                                    // console.log(varMap['cs'].text);\r\n                                                    setMetricName(dropdownopt[value]);\r\n                                                }}\r\n                                            />\r\n                                            {/* <Header.Subheader style={{ fontWeight: 300 }}>\r\n                        Health determinants impact COVID-19 outcomes.\r\n                    </Header.Subheader> */}\r\n                                            {/* <Header.Subheader style={{ fontWeight: 300 }}>Click on a state below to drill down to your county data.</Header.Subheader> */}\r\n                                        </Header.Content>\r\n                                    </Header>\r\n                                    <SvgMap name={metric}\r\n                                        legendSplit={legendSplit}\r\n                                        legendSplit1={legendSplit1}\r\n                                        legendMin={legendMin}\r\n                                        legendMax={legendMax}\r\n                                    />\r\n\r\n                                    <ComposableMap projection=\"geoAlbersUsa\"\r\n                                        projectionConfig={{ scale: `${config.scale}` }}\r\n                                        width={500}\r\n                                        height={580}\r\n                                        data-tip=\"\"\r\n                                        offsetX={config.offsetX}\r\n                                        offsetY={config.offsetY}>\r\n                                        <Geographies geography={config.url}>\r\n                                            {({ geographies }) => geographies.map(geo =>\r\n                                                <Geography\r\n                                                    key={geo.rsmKey}\r\n                                                    geography={geo}\r\n                                                    onClick={() => {\r\n                                                        history.push(\"/\" + stateFips + \"/\" + geo.properties.COUNTYFP);\r\n                                                        // console.log(geo.properties.COUNTYFP);\r\n                                                    }}\r\n                                                    style={{\r\n                                                        default: {\r\n                                                            //  fill: \"#ECEFF1\",\r\n                                                            stroke: \"#607D8B\",\r\n                                                            strokeWidth: 0.95,\r\n                                                            outline: \"none\",\r\n                                                        },\r\n                                                        // hover: {\r\n                                                        //    fill: \"#CFD8DC\",\r\n                                                        //    stroke: \"#607D8B\",\r\n                                                        //    strokeWidth: 1,\r\n                                                        //    outline: \"none\",\r\n                                                        // },\r\n                                                        pressed: {\r\n\r\n                                                            outline: \"none\",\r\n                                                        }\r\n                                                    }}\r\n                                                    onMouseEnter={() => {\r\n                                                        setDelayHandler(setTimeout(() => {\r\n                                                            setCountyFips(geo.properties.COUNTYFP);\r\n                                                            setCountyName(fips2county[stateFips + geo.properties.COUNTYFP]);\r\n                                                            // setTooltipContent('Click to see more county data');\r\n                                                        }, 500))\r\n                                                    }}\r\n                                                    onMouseLeave={() => {\r\n                                                        clearTimeout(delayHandler)\r\n                                                        setTooltipContent(\"\")\r\n                                                    }}\r\n                                                    fill={countyFips === geo.properties.COUNTYFP ? countyColor :\r\n                                                        ((colorScale && dataUs[stateFips + geo.properties.COUNTYFP] &&\r\n                                                            dataUs[stateFips + geo.properties.COUNTYFP][metric] && dataUs[stateFips + geo.properties.COUNTYFP][metric] > 0) ?\r\n                                                            colorScale[dataUs[stateFips + geo.properties.COUNTYFP][metric]] :\r\n                                                            (colorScale && dataUs[stateFips + geo.properties.COUNTYFP] && dataUs[stateFips + geo.properties.COUNTYFP][metric] === 0) ? '#e1dce2' : '#FFFFFF')}\r\n                                                />\r\n                                            )}\r\n                                        </Geographies>\r\n                                    </ComposableMap>\r\n                                    <div style={{ paddingTop: 0, paddingLeft: '1em', paddingRight: '4em' }}>\r\n                                    <Slider\r\n                                        defaultValue={20}\r\n                                        // getAriaValueText={valuetext}\r\n                                        aria-labelledby=\"discrete-slider\"\r\n                                        valueLabelDisplay=\"off\"\r\n                                        step={10}\r\n                                        marks={marks}\r\n                                        min={0}\r\n                                        max={40}\r\n                                    />\r\n                                    </div>\r\n                                    \r\n\r\n\r\n                                    <Grid.Row style={{ paddingTop: 0, paddingLeft: '0em', paddingRight: '2em' }} centered>\r\n                                        <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\r\n                                            {varNameMap[metric].text}{dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' : (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))} . The darker shading indicates a larger number of {varNameMap[metric].name}.\r\n                    </small>\r\n                                    </Grid.Row>\r\n\r\n                                </Grid.Column>\r\n                                <Grid.Column width={9} style={{ paddingLeft: \"2\", paddingLeft: \"1\" }}>\r\n                                    <Header as='h2' style={{ fontWeight: 400, paddingLeft: \"2.5\" }}>\r\n                                        <Header.Content>\r\n                                            {/* {varGraphPair[metric]['legend'][0]} for <span style={{ color: countyColor }}>{countyName}</span> */}\r\n                                            {varGraphPair[metric]['legend'][0]} for <b>{countyName}</b>\r\n                                            <Header.Subheader style={{ fontWeight: 300 }}>\r\n                                            </Header.Subheader>\r\n                                        </Header.Content>\r\n                                    </Header>\r\n                                    <Grid>\r\n                                        <Grid.Column>\r\n                                            <Grid.Row style={{ paddingLeft: \"1.5\", paddingTop: \"1\", paddingBottom: 0 }} centered>\r\n\r\n                                                <svg width=\"630\" height='80'>\r\n\r\n                                                    <rect x={50} y={12} width=\"15\" height=\"2\" style={{ fill: countyColor, strokeWidth: 1, stroke: countyColor }} />\r\n                                                    <text x={75} y={20} style={{ fontSize: 16 }}>7-day rolling average in {countyName}</text>\r\n\r\n                                                    {varGraphPair[metric]['name'][1] === 'casesdailymean7' || varGraphPair[metric]['name'][1] === 'deathsdailymean7' ?\r\n                                                        <rect x={50} y={40} width=\"15\" height=\"15\" style={{ fill: stateColor, strokeWidth: 1, stroke: stateColor }} /> :\r\n                                                        <rect x={50} y={35} width=\"15\" height=\"1\" style={{ fill: '#71c7ec', strokeWidth: 1, stroke: '#71c7ec' }} />}\r\n                                                    {varGraphPair[metric]['name'][1] === 'casesdailymean7' || varGraphPair[metric]['name'][1] === 'deathsdailymean7' ?\r\n                                                        <text x={75} y={52} style={{ fontSize: 16 }}> {varGraphPair[metric]['legend'][0]} </text> :\r\n                                                        <rect x={50} y={35} width=\"15\" height=\"1\" style={{ fill: '#71c7ec', strokeWidth: 1, stroke: '#71c7ec' }} />}\r\n                                                    {varGraphPair[metric]['name'][1] === 'casesdailymean7' || varGraphPair[metric]['name'][1] === 'deathsdailymean7' ?\r\n                                                        <text x={250} y={12} style={{ fontSize: 0 }}></text> :\r\n                                                        <text x={75} y={43} style={{ fontSize: 16 }}>7-day rolling average in Georgia</text>}\r\n                                                    {varGraphPair[metric]['name'][1] === 'casesdailymean7' || varGraphPair[metric]['name'][1] === 'deathsdailymean7' ?\r\n                                                        <rect x={0} y={0} width=\"0\" height=\"0\" style={{ fill: 'white', strokeWidth: 0, stroke: 'white' }} /> :\r\n                                                        <rect x={50} y={55} width=\"15\" height=\"15\" style={{ fill: stateColor, strokeWidth: 1, stroke: stateColor }} />}\r\n                                                    {varGraphPair[metric]['name'][1] === 'casesdailymean7' || varGraphPair[metric]['name'][1] === 'deathsdailymean7' ?\r\n                                                        <rect x={0} y={0} width=\"0\" height=\"0\" style={{ fill: 'white', strokeWidth: 0, stroke: 'white' }} /> :\r\n                                                        <text x={75} y={68} style={{ fontSize: 16 }}> {varGraphPair[metric]['legend'][0]} </text>}\r\n\r\n                                                </svg>\r\n\r\n                                                <ChartGraph\r\n                                                    name={varGraphPair}\r\n                                                    metric={metric}\r\n                                                    stateFips={stateFips}\r\n                                                    countyFips={countyFips}\r\n                                                    data1={covidMetric14}\r\n                                                    data2={dataTS}\r\n\r\n                                                />\r\n\r\n\r\n                                            </Grid.Row>\r\n                                            <Grid.Row style={{ paddingTop: '2em', paddingLeft: '2.9em', paddingRight: '2.9em' }} centered>\r\n                                                <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\r\n                                                    As of {dataTS[stateFips + countyFips][0].todaydate === 'n/a' ? 'N/A' : (new Date(dataTS[stateFips + countyFips][0].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}, this chart shows the daily number of new {varNameMap[metric].name} of confirmed COVID-19 in <b>{countyName}</b>. The daily number reflects the date the case was first reported to DPH.\r\n                        The vertical bars show the number of new daily {varNameMap[metric].name} while the line shows the 7-day moving average of new daily {varNameMap[metric].name}.\r\n                        </small>\r\n                                            </Grid.Row>\r\n                                        </Grid.Column>\r\n                                    </Grid>\r\n                                </Grid.Column>\r\n\r\n                            </Grid>\r\n                        </div>\r\n                    }\r\n                    <Notes />\r\n                </Container>\r\n                {/* <ReactTooltip>{tooltipContent}</ReactTooltip> */}\r\n                <ReactTooltip > <font size=\"+2\"><b >{countyName}</b> </font> <br />\r\n                    <b>Total Cases</b>: {data[stateFips + countyFips]['casescum'] >= 0 ? data[stateFips + countyFips]['casescum'].toFixed(0) : \"N/A\"} <br />\r\n                    <b>Total Deaths</b>: {data[stateFips + countyFips]['deathscum'] >= 0 ? data[stateFips + countyFips]['deathscum'].toFixed(0) : \"N/A\"} <br />\r\n                    <b>Total case per 100k</b>: {data[stateFips + countyFips]['casescumR'] >= 0 ? data[stateFips + countyFips]['casescumR'].toFixed(0) : \"N/A\"} <br />\r\n                    <b>Total Deaths per 100k</b>: {data[stateFips + countyFips]['deathscumR'] >= 0 ? data[stateFips + countyFips]['deathscumR'].toFixed(0) : 'N/A'} <br />\r\n                    <b>Last 14-day Cases per 100k</b>: {data[stateFips + countyFips]['casescum14dayR'] >= 0 ? data[stateFips + countyFips]['casescum14dayR'].toFixed(0) : \"N/A\"} <br />\r\n                    <b>Click to see county-level data.</b> </ReactTooltip>\r\n            </div>\r\n        );\r\n    } else {\r\n        return <Loader active inline='centered' />\r\n    }\r\n\r\n\r\n\r\n\r\n}","import React, { useEffect, useState } from 'react'\r\nimport { Container, Grid, Breadcrumb, Header, Loader, List, Table, Divider, Popup } from 'semantic-ui-react'\r\nimport AppBar from './AppBar';\r\nimport Geographies from './Geographies';\r\nimport Geography from './Geography';\r\nimport ComposableMap from './ComposableMap';\r\nimport {\r\n  VictoryChart,\r\n  VictoryTooltip,\r\n  VictoryVoronoiContainer,\r\n  VictoryContainer,\r\n  VictoryGroup,\r\n  VictoryBar,\r\n  VictoryTheme,\r\n  VictoryAxis,\r\n  VictoryLegend,\r\n  VictoryLine,\r\n  VictoryLabel,\r\n  VictoryScatter,\r\n  VictoryPie\r\n} from 'victory';\r\n\r\nimport { useParams, useHistory } from 'react-router-dom';\r\nimport Notes from './Notes';\r\nimport ReactTooltip from \"react-tooltip\";\r\nimport fips2county from './fips2county.json'\r\nimport configs from \"./state_config.json\";\r\nimport configscounty from \"./county_config.json\";\r\nimport _ from 'lodash';\r\nimport * as d3 from 'd3-geo'\r\nimport Chart from \"react-google-charts\";\r\nimport { scaleQuantile, scaleQuantize } from \"d3-scale\";\r\n\r\nconst countyColor = '#f2a900';\r\nconst stateColor = '#bdbfc1';\r\nconst nationColor = '#d9d9d7';\r\nconst colorPalette = [\r\n  \"#e1dce2\",\r\n  \"#d3b6cd\",\r\n  \"#bf88b5\",\r\n  \"#af5194\",\r\n  \"#99528c\",\r\n  \"#633c70\",\r\n];\r\n\r\n\r\nfunction ScatterChart(props) {\r\n\r\n  return (\r\n    <VictoryChart\r\n      width={400}\r\n      height={300}\r\n      scale={{ x: props.xlog ? 'log' : 'linear', y: props.ylog ? 'log' : 'linear' }}\r\n      minDomain={{ y: props.ylog ? 1 : 0 }}\r\n      padding={{ left: 80, right: 10, top: 50, bottom: 50 }}>\r\n      {props.showLegend && <VictoryLegend\r\n        x={10} y={10}\r\n        orientation=\"horizontal\"\r\n        colorScale={[stateColor, countyColor]}\r\n        data={[\r\n          { name: ('Other counties in ' + props.stateName) }, { name: props.countyName }\r\n        ]}\r\n      />}\r\n      <VictoryScatter\r\n        data={_.filter(_.map(props.data, (d, k) => { d.fips = k; return d; }), (d) => (\r\n          d.fips.length === 5 &&\r\n          d.fips.substring(0, 2) === props.stateFips &&\r\n          d[props.x] && d[props.y]))}\r\n        sortKey={(d) => d.fips === (props.stateFips + props.countyFips)}\r\n        style={{\r\n          data: {\r\n            fill: ({ datum }) => datum.fips === (props.stateFips + props.countyFips) ? countyColor : stateColor,\r\n            fillOpacity: ({ datum }) => datum.fips === (props.stateFips + props.countyFips) ? 1.0 : 0.7\r\n          }\r\n        }}\r\n        size={4}\r\n        x={props.x}\r\n        y={props.y}\r\n      />\r\n      <VictoryAxis label={props.varMap[props.x] ? props.varMap[props.x].name : props.x}\r\n        tickCount={4}\r\n        tickFormat={(y) => (props.rescaleX ? (Math.round(y / 1000) + 'k') : (Math.round(y * 100) / 100))} />\r\n      <VictoryAxis dependentAxis label={props.varMap[props.y] ? props.varMap[props.y].name : props.y}\r\n        style={{ axisLabel: { padding: 40 } }}\r\n        tickCount={5}\r\n        tickFormat={(y) => (Math.round(y * 100) / 100)} />\r\n    </VictoryChart>);\r\n\r\n}\r\n\r\nfunction numberWithCommas(x) {\r\n  x = x.toString();\r\n  var pattern = /(-?\\d+)(\\d{3})/;\r\n  while (pattern.test(x))\r\n    x = x.replace(pattern, \"$1,$2\");\r\n  return x;\r\n}\r\n\r\nfunction BarChart(props) {\r\n  const colors = {\r\n    \"1\": '#778899',\r\n  };\r\n  return (\r\n    <VictoryChart\r\n      theme={VictoryTheme.material}\r\n      width={props.width || 560}\r\n      height={180}\r\n      domainPadding={props.pad || 10}\r\n      scale={{ y: props.ylog ? 'log' : 'linear' }}\r\n      minDomain={{ y: props.ylog ? 1 : 0 }}\r\n      padding={{ left: 79, right: 40, top: 40, bottom: 50 }}\r\n      containerComponent={<VictoryContainer responsive={false} />}\r\n    >\r\n      <VictoryLabel style={{\r\n        fontSize: 20, paddingBottom: '0.5em'\r\n      }} text={props.title} x={(props.width || 560) / 2} y={26} textAnchor=\"middle\" />\r\n      <VictoryAxis style={{\r\n        tickLabels: { fontSize: 18, padding: 2 }\r\n      }} />\r\n      <VictoryAxis dependentAxis style={{\r\n        tickLabels: { fontSize: 18, padding: 2 }\r\n      }}\r\n        tickFormat={(y) => (y < 1000 ? y : (y / 1000 + 'k'))} />\r\n      <VictoryBar\r\n        horizontal\r\n        barRatio={0.8}\r\n        // labels={({ datum }) => (Math.round(datum.value * 100) / 100)}\r\n        data={[{ key: props.keyv[0], 'value': props.data[props.stateFips + props.countyFips][props.var[0]] || 0, 'colors': '1' },\r\n        { key: props.keyv[1], 'value': props.data[props.stateFips + props.countyFips][props.var[1]] || 0, 'colors': '1' },\r\n        { key: props.keyv[2], 'value': props.data[props.stateFips + props.countyFips][props.var[2]] || 0, 'colors': '1' },\r\n        { key: props.keyv[3], 'value': props.data[props.stateFips + props.countyFips][props.var[3]] || 0, 'colors': '1' }]}\r\n        labelComponent={<VictoryLabel dx={5} style={{ fontWeight: 300, fontSize: 18, fill: ({ datum }) => colors[datum.key] }} />}\r\n        style={{\r\n          data: {\r\n            fill: ({ datum }) => colors[datum.colors]\r\n          }\r\n        }}\r\n        x=\"key\"\r\n        y=\"value\"\r\n      />\r\n    </VictoryChart>);\r\n}\r\n\r\nexport default function CountyReport() {\r\n\r\n  let { stateFips, countyFips } = useParams();\r\n  // const [countyFips, setCountyFips] = useState('121');\r\n  const [configsCounty, setConfig] = useState();\r\n  const [stateName, setStateName] = useState('Georgia');\r\n  const [countyName, setCountyName] = useState('');\r\n  const [dateCur, setDateCur] = useState();\r\n  const [zipCode, setZipCode] = useState('30328');\r\n  const [zipCodeH, setZipCodeH] = useState('30328');\r\n  const [zipCodeD, setZipCodeD] = useState('30328');\r\n  const [zipCodeFinal, setZipCodeFinal] = useState('30328');\r\n  const history = useHistory();\r\n  const [data, setData] = useState();\r\n  const [data_cases, setDataCG] = useState();\r\n  const [data_deaths, setDataDG] = useState();\r\n  const [datades_cases, setDatadesCG] = useState();\r\n  const [datades_deaths, setDatadesDG] = useState();\r\n  const [dataG, setDataG] = useState();\r\n  const [dataZip, setDataZip] = useState();\r\n  const [dataTS, setDataTS] = useState();\r\n  const [mapOut, setDataMapOut] = useState();\r\n\r\n  const [legendMax, setLegendMax] = useState([]);\r\n  const [legendMaxD, setLegendMaxD] = useState([]);\r\n\r\n  const [legendMax_graph, setLegendMaxGraph] = useState(0);\r\n\r\n  const [legendMin, setLegendMin] = useState([]);\r\n  const [legendMinD, setLegendMinD] = useState([]);\r\n\r\n  const [legendSplit, setLegendSplit] = useState([]);\r\n  const [legendSplitD, setLegendSplitD] = useState([]);\r\n  const [colorScale, setColorScale] = useState();\r\n  const [colorScaleD, setColorScaleD] = useState();\r\n\r\n\r\n  // const [metric, setMetric] = useState('mean7daycases');\r\n  const [tooltipContent, setTooltipContent] = useState('');\r\n  const [covidMetric, setCovidMetric] = useState({\r\n    casescum: 'N/A', deathscum: 'N/A', casescumR: 'N/A', deathscumR: 'N/A',\r\n    casesdailymean14: 'N/A', deathsdailymean14: 'N/A', casesdailymean14R: 'N/A', deathsdailymean14R: 'N/A', \"cfr\": 'N/A', \"cfrcompare\": '', t: 'n/a'\r\n  });\r\n  const [covidMetricLast, setCovidMetricLast] = useState({\r\n    casescum: 'N/A', deathscum: 'N/A', casescumR: 'N/A', deathscumR: 'N/A',\r\n    casesdailymean14: 'N/A', deathsdailymean14: 'N/A', casesdailymean14R: 'N/A', deathsdailymean14R: 'N/A', \"cfr\": 'N/A', \"cfrcompare\": '', t: 'n/a'\r\n  });\r\n  const [covidMetricGa, setCovidMetricGa] = useState({\r\n    casescum: 'N/A', deathscum: 'N/A', casescumR: 'N/A', deathscumR: 'N/A',\r\n    casesdailymean14: 'N/A', deathsdailymean14: 'N/A', casesdailymean14R: 'N/A', deathsdailymean14R: 'N/A', \"cfr\": 'N/A', \"cfrcompare\": '', t: 'n/a'\r\n  });\r\n  const [covidMetric14, setCovidMetric14] = useState({\r\n    casescum: 'N/A', deathscum: 'N/A', casescumR: 'N/A', deathscumR: 'N/A',\r\n    casesdailymean14: 'N/A', deathsdailymean14: 'N/A', casesdailymean14R: 'N/A', deathsdailymean14R: 'N/A', \"cfr\": 'N/A', \"cfrcompare\": '', t: 'n/a'\r\n  });\r\n  const [varMap, setVarMap] = useState({});\r\n  // const [countyFips, setCountyFips] = useState('');\r\n\r\n\r\n  const varNameMap = {\r\n    \"casescum\": { \"name\": 'cases', \"text\": \"The map shows the total number of confirmed COVID-19 cases in each zip code as of \" },\r\n    \"deathscum\": { \"name\": 'deaths', \"text\": \"The map shows the total number of confirmed COVID-19 deaths in each zip code as of \" },\r\n    \"casescumR\": { \"name\": 'cases per 100,000 residents', \"text\": \"The map shows the total number of confirmed COVID-19 cases per 100,000 residents in each zip code as of \" },\r\n    \"deathscumR\": { \"name\": 'deaths per 100,000 residents', \"text\": \"The map shows the total number of confirmed COVID-19 deaths per 100,000 residents in each zip code as of \" }\r\n  };\r\n\r\n  const [delayHandler, setDelayHandler] = useState(null)\r\n\r\n  useEffect(() => {\r\n\r\n    const configMatched = configscounty.find(s => s.countyfips === countyFips);\r\n\r\n    // let projection = d3.geoAlbersUsa();\r\n    // // let gps = [-85.504701, 34.855196]\r\n    // let gps = [-0.6, 38.7]\r\n    // console.log(projection.center)\r\n    // console.log(countyfips);\r\n\r\n    // console.log(configMatched);\r\n    if (!configMatched || !fips2county[stateFips + countyFips]) {\r\n      history.push('/');\r\n    } else {\r\n      setConfig(configMatched);\r\n      // setStateName(configMatched.name);\r\n      setCountyName(fips2county[stateFips + countyFips]);\r\n\r\n      fetch('/data/rawdata/variable_mapping.json').then(res => res.json())\r\n        .then(x => setVarMap(x));\r\n\r\n      fetch('/data/data_us.json').then(res => res.json())\r\n        .then(x => setData(x));\r\n      fetch('/data/data.json').then(res => res.json())\r\n        .then(x => setDateCur(x));\r\n      fetch('/data/data_cases_ga.json').then(res => res.json())\r\n        .then(x => setDataCG(x));\r\n      fetch('/data/data_deaths_ga.json').then(res => res.json())\r\n        .then(x => setDataDG(x));\r\n      fetch('/data/data_describe_cases.json').then(res => res.json())\r\n        .then(x => setDatadesCG(x));\r\n      fetch('/data/data_describe_deaths.json').then(res => res.json())\r\n        .then(x => setDatadesDG(x));\r\n      fetch('/data/data.json').then(res => res.json())\r\n        .then(x => setDataG(x));\r\n\r\n      fetch('/data/zipcode.json').then(res => res.json())\r\n        .then(x => setDataZip(x));\r\n\r\n      fetch('/data/timeseries13' + '.json').then(res => res.json())\r\n        .then(x => setDataTS(x));\r\n\r\n      fetch('/data/mapout' + '.json').then(res => res.json())\r\n        .then(x => setDataMapOut(x));\r\n\r\n      fetch('/data/timeseries13' + '.json').then(res => res.json())\r\n        .then(\r\n          x => {\r\n            // setDataTS(x);\r\n            var max = 0\r\n            var length = 0\r\n            _.each(x[stateFips + countyFips], d => {\r\n              length = length + 1\r\n              // console.log(d);\r\n              if (d['cases'] > max) {\r\n                max = d['cases'];\r\n              }\r\n\r\n            });\r\n            setLegendMaxGraph(max.toFixed(0));\r\n            // console.log(max.toFixed(0));\r\n          });\r\n\r\n      fetch('/data/zipcode.json').then(res => res.json())\r\n        .then(x => {\r\n          // setDataZip(x);\r\n\r\n          const cs = scaleQuantile()\r\n            .domain(_.map(_.filter(_.map(x, (d, k) => {\r\n              d.fips = k\r\n              return d\r\n            }),\r\n              d => (\r\n                (d.casescum >= 0 &&\r\n                  d.fips.length === 5 && Number(d.fips) >= 30001 && Number(d.fips) <= 31999) || (d.casescum >= 0 &&\r\n                    d.fips.length === 5 && Number(d.fips) >= 39800 && Number(d.fips) <= 39999))),\r\n              d => d['casescum']))\r\n            .range(colorPalette);\r\n\r\n          let scaleMap = {}\r\n          _.each(_.filter(_.map(x, (d, k) => {\r\n            d.fips = k\r\n            return d\r\n          }),\r\n            d => (\r\n              (d.casescum >= 0 &&\r\n                d.fips.length === 5 && Number(d.fips) >= 30001 && Number(d.fips) <= 31999) || (d.casescum >= 0 &&\r\n                  d.fips.length === 5 && Number(d.fips) >= 39800 && Number(d.fips) <= 39999)))\r\n            , d => {\r\n              scaleMap[d['casescum']] = cs(d['casescum'])\r\n            });\r\n          setColorScale(scaleMap);\r\n\r\n          var max = 0\r\n          var min = 100\r\n          var length = 0\r\n          _.each(x, d => {\r\n            // console.log(d.fips[0]);\r\n            if ((d['casescum'] > max && d.fips.length === 5 && Number(d.fips) >= 30001 && Number(d.fips) <= 31999) ||\r\n              (d['casescum'] > max && d.fips.length === 5 && Number(d.fips) >= 39800 && Number(d.fips) <= 39999)\r\n            ) {\r\n              max = d['casescum'];\r\n              // console.log(d.fips)\r\n            } else if ((d.fips.length === 5 && d['casescum'] < min && d['casescum'] >= 0 && Number(d.fips) >= 30001 && Number(d.fips) <= 31999) ||\r\n              (d.fips.length === 5 && d['casescum'] < min && d['casescum'] >= 0 && Number(d.fips) >= 39800 && Number(d.fips) <= 39999)\r\n            ) {\r\n              min = d['casescum']\r\n              // console.log(d.fips)\r\n            }\r\n\r\n          });\r\n          if (max > 999) {\r\n            max = (max / 1000).toFixed(0) + \"K\";\r\n            setLegendMax(max);\r\n          } else {\r\n            setLegendMax(max.toFixed(0));\r\n\r\n          }\r\n          setLegendMin(min.toFixed(0));\r\n\r\n          var split = scaleQuantile()\r\n            .domain(_.map(_.filter(_.map(x, (d, k) => {\r\n              d.fips = k\r\n              return d\r\n            }),\r\n              d => (\r\n                (d.casescum >= 0 &&\r\n                  d.fips.length === 5 && Number(d.fips) >= 30001 && Number(d.fips) <= 31999) || (d.casescum >= 0 &&\r\n                    d.fips.length === 5 && Number(d.fips) >= 39800 && Number(d.fips) <= 39999))),\r\n              d => d['casescum']))\r\n            .range(colorPalette);\r\n\r\n          setLegendSplit(split.quantiles());\r\n          console.log(split.quantiles());\r\n        });\r\n\r\n\r\n    }\r\n  }, [countyFips]);\r\n\r\n  useEffect(() => {\r\n    fetch('/data/zipcode.json').then(res => res.json())\r\n      .then(x => {\r\n        const csD = scaleQuantile()\r\n          .domain(_.map(_.filter(_.map(x, (d, k) => {\r\n            d.fips = k\r\n            return d\r\n          }),\r\n            d => (\r\n              (d.deathscum >= 0 &&\r\n                d.fips.length === 5 && Number(d.fips) >= 30001 && Number(d.fips) <= 31999) || (d.deathscum >= 0 &&\r\n                  d.fips.length === 5 && Number(d.fips) >= 39800 && Number(d.fips) <= 39999))),\r\n            d => d['deathscum']))\r\n          .range(colorPalette);\r\n\r\n        let scaleMap = {}\r\n        _.each(_.filter(_.map(x, (d, k) => {\r\n          d.fips = k\r\n          return d\r\n        }),\r\n          d => (\r\n            (d.deathscum >= 0 &&\r\n              d.fips.length === 5 && Number(d.fips) >= 30001 && Number(d.fips) <= 31999) || (d.deathscum >= 0 &&\r\n                d.fips.length === 5 && Number(d.fips) >= 39800 && Number(d.fips) <= 39999)))\r\n          , d => {\r\n            scaleMap[d['deathscum']] = csD(d['deathscum'])\r\n          });\r\n        setColorScaleD(scaleMap);\r\n\r\n        var max = 0\r\n        var min = 100\r\n        _.each(x, d => {\r\n          // console.log(d.fips[0]);\r\n          if ((d['deathscum'] > max && d.fips.length === 5 && Number(d.fips) >= 30001 && Number(d.fips) <= 31999) ||\r\n            (d['deathscum'] > max && d.fips.length === 5 && Number(d.fips) >= 39800 && Number(d.fips) <= 39999)\r\n          ) {\r\n            max = d['deathscum'];\r\n            console.log(max)\r\n          } else if ((d.fips.length === 5 && d['deathscum'] < min && d['deathscum'] >= 0 && Number(d.fips) >= 30001 && Number(d.fips) <= 31999) ||\r\n            (d.fips.length === 5 && d['deathscum'] < min && d['deathscum'] >= 0 && Number(d.fips) >= 39800 && Number(d.fips) <= 39999)\r\n          ) {\r\n            min = d['deathscum']\r\n            // console.log(d.fips)\r\n          }\r\n\r\n\r\n        });\r\n        if (max > 999) {\r\n          max = (max / 1000).toFixed(0) + \"K\";\r\n          setLegendMaxD(max);\r\n        } else {\r\n          setLegendMaxD(max.toFixed(0));\r\n\r\n        }\r\n        setLegendMinD(min.toFixed(0));\r\n\r\n        var split = scaleQuantile()\r\n          .domain(_.map(_.filter(_.map(x, (d, k) => {\r\n            d.fips = k\r\n            return d\r\n          }),\r\n            d => (\r\n              (d.deathscum >= 0 &&\r\n                d.fips.length === 5 && Number(d.fips) >= 30001 && Number(d.fips) <= 31999) || (d.deathscum >= 0 &&\r\n                  d.fips.length === 5 && Number(d.fips) >= 39800 && Number(d.fips) <= 39999))),\r\n            d => d['deathscum']))\r\n          .range(colorPalette);\r\n\r\n        setLegendSplitD(split.quantiles());\r\n        // console.log(split.thresholds().reverse());\r\n      });\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (dataTS && dataTS[stateFips + countyFips]) {\r\n      setCovidMetric(dataG[stateFips + countyFips]);\r\n      setCovidMetricGa(dataG[stateFips]);\r\n      // setCovidMetric(dataG[stateFips + countyFips]);\r\n      setCovidMetric14(_.takeRight(dataTS[stateFips + countyFips], 14)[0]);\r\n      setCovidMetricLast(_.takeRight(dataTS[stateFips + countyFips])[0]);\r\n    }\r\n  }, [dataTS])\r\n\r\n  if (data && dataTS && varMap) {\r\n\r\n    return (\r\n      <div>\r\n        <AppBar menu='countyReport' />\r\n        <Container style={{ marginTop: '8em', minWidth: '1260px', paddingRight: 0 }}>\r\n          {configsCounty &&\r\n            <div>\r\n              <Breadcrumb>\r\n                {/* <Breadcrumb.Section link onClick={() => history.push('/')}>United States</Breadcrumb.Section>\r\n            <Breadcrumb.Divider /> */}\r\n                <Breadcrumb.Section link onClick={() => history.push('/' + stateFips)}>{stateName}</Breadcrumb.Section>\r\n                <Breadcrumb.Divider />\r\n                <Breadcrumb.Section active>{countyName}</Breadcrumb.Section>\r\n                <Breadcrumb.Divider />\r\n              </Breadcrumb>\r\n              <Header as='h1' style={{ fontWeight: 300 }}>\r\n                <Header.Content>\r\n                  {/* Covid-19 Health Equity Report for <span style={{color: countyColor}}>{countyName}</span> */}\r\n                  {/* <span style={{ color: countyColor }}>{countyName}</span> */}\r\n                  <b>{countyName}</b>\r\n                  {/* <Header.Subheader style={{fontWeight: 300}}>\r\n              See how health determinants impact COVID-19 outcomes. \r\n              </Header.Subheader> */}\r\n                </Header.Content>\r\n              </Header>\r\n              <Divider horizontal style={{ fontWeight: 600, color: '#232423', fontSize: '16pt', paddingTop: '1em' }}>SUMMARY OF COVID-19 IN <b>{countyName}</b>, GEORGIA</Divider>\r\n\r\n              <Grid style={{ paddingTop: '2em', width: \"1260px\" }} centered>\r\n                <Header as='h2' style={{ fontWeight: 300, textAlign: 'center' }} >\r\n                  <Header.Content>\r\n                    COVID-19 <b>cases</b> in {countyName}\r\n                  </Header.Content>\r\n                </Header>\r\n                <Grid.Row style={{ paddingTop: '1em' }}>\r\n                  <Grid.Column width={16} style={{ paddingLeft: '0', paddingRight: '0' }}>\r\n                    <Table called fixed>\r\n                      <Table.Header>\r\n                        <Table.Row textAlign='center'>\r\n                          <Table.HeaderCell colSpan='1' style={{ width: 150 }}> </Table.HeaderCell>\r\n                          <Popup\r\n                            trigger={\r\n                              <Table.HeaderCell style={{ width: 200 }}> ALL CASES TO DATE</Table.HeaderCell>}\r\n                            content={\"All confirmed cases reported to DPH as of \" + new Date(dateCur[stateFips + countyFips].todaydat * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' })}\r\n                            basic />\r\n                          <Popup\r\n                            trigger={\r\n                              <Table.HeaderCell style={{ width: 200 }}> CASES IN PAST 14 DAYS</Table.HeaderCell>}\r\n                            content={\"All confirmed cases reported to DPH during the 14 days preceding the report publication date.\"}\r\n                            basic />\r\n                          <Popup\r\n                            trigger={\r\n                              <Table.HeaderCell style={{ width: 200 }}> CASES PER 100K (PAST 14 DAYS)</Table.HeaderCell>}\r\n                            content={\"14-day case count/100K residents based on 2020 population projects derived from census data.\"}\r\n                            basic />\r\n                          <Popup\r\n                            trigger={\r\n                              <Table.HeaderCell style={{ width: 200 }}> 14-DAY RATE CATEGORY</Table.HeaderCell>} flowing hoverable>\r\n                            Based on the 14-day case rate\r\n                          <List as='ul'>\r\n                              <List.Item as='li'>High: {'>'} 100 cases/100K</List.Item>\r\n                              <List.Item as='li'>Moderately high: {\">\"} 50-100 cases/100K</List.Item>\r\n                              <List.Item as='li'>Moderately: {\">\"} 10-50 cases/100K</List.Item>\r\n                              <List.Item as='li'>Low: {\">\"} 0-10 cases/100K</List.Item>\r\n                              <List.Item as='li'>Less than 5 cases reported, rate not calculated</List.Item>\r\n                            </List>\r\n                          </Popup>\r\n\r\n                          <Popup\r\n                            trigger={\r\n                              <Table.HeaderCell style={{ width: 200 }}> CHANGE IN LAST 2 WEEKS</Table.HeaderCell>} flowing hoverable>\r\n                            Change in case count during the previous 14 days, comparing<br></br> the second 7-day period to the first 7-day period.\r\n                          <List as='ul'>\r\n                              <List.Item as='li'>Increasing: 5% or greater change</List.Item>\r\n                              <List.Item as='li'>Decreasing: -5% or less change</List.Item>\r\n                              <List.Item as='li'>Less than 5% change</List.Item>\r\n                            </List>\r\n                          </Popup>\r\n                        </Table.Row>\r\n\r\n                        <Table.Row textAlign='center'>\r\n                          <Table.HeaderCell style={{ fontSize: '18px' }}> {countyName} </Table.HeaderCell>\r\n                          <Table.HeaderCell style={{ fontSize: '27px' }}>{covidMetric.casescum === null || covidMetric.casescum < 0 ? '0' : covidMetric.casescum.toLocaleString()}</Table.HeaderCell>\r\n                          <Table.HeaderCell style={{ fontSize: '27px' }}>{covidMetric.casescum14day === null || covidMetric.casescum14day < 0 ? '0' : numberWithCommas(parseFloat(covidMetric.casescum14day).toFixed(0)).toLocaleString()}</Table.HeaderCell>\r\n                          <Table.HeaderCell style={{ fontSize: '27px' }}>{covidMetric.casescum14dayR === null || covidMetric.casescum14dayR < 0 ? '0' : numberWithCommas(parseFloat(covidMetric.casescum14dayR).toFixed(2)).toLocaleString()}</Table.HeaderCell>\r\n                          <Table.HeaderCell style={{ fontSize: '18px' }}>{covidMetric.category14day === null || covidMetric.category14day < 0 ? '0' : covidMetric.category14day}</Table.HeaderCell>\r\n                          <Table.HeaderCell style={{ fontSize: '18px' }}>{covidMetric.change14day === null ? '0' : covidMetric.change14day}</Table.HeaderCell>\r\n                        </Table.Row>\r\n                        <Table.Row textAlign='center'>\r\n                          <Table.HeaderCell style={{ fontSize: '18px' }}>Georgia</Table.HeaderCell>\r\n                          <Table.HeaderCell style={{ fontSize: '27px' }}>{covidMetricGa.casescum === null || covidMetricGa.casescum < 0 ? '0' : covidMetricGa.casescum.toLocaleString()}</Table.HeaderCell>\r\n                          <Table.HeaderCell style={{ fontSize: '27px' }}>{covidMetricGa.casescum14day === null || covidMetricGa.casescum14day < 0 ? '0' : numberWithCommas(parseFloat(covidMetricGa.casescum14day).toFixed(0)).toLocaleString()}</Table.HeaderCell>\r\n                          <Table.HeaderCell style={{ fontSize: '27px' }}>{covidMetricGa.casescum14dayR === null || covidMetricGa.casescum14dayR < 0 ? '0' : numberWithCommas(parseFloat(covidMetricGa.casescum14dayR).toFixed(2)).toLocaleString()}</Table.HeaderCell>\r\n                          <Table.HeaderCell style={{ fontSize: '18px' }}>{covidMetricGa.category14day === null || covidMetricGa.category14day < 0 ? '0' : covidMetricGa.category14day}</Table.HeaderCell>\r\n                          <Table.HeaderCell style={{ fontSize: '18px' }}>{covidMetricGa.change14day === null || covidMetricGa.change14day < 0 ? '0' : covidMetricGa.change14day}</Table.HeaderCell>\r\n                        </Table.Row>\r\n                      </Table.Header>\r\n                    </Table>\r\n                  </Grid.Column>\r\n\r\n                </Grid.Row>\r\n\r\n                <Header as='h2' style={{ fontWeight: 300, textAlign: 'center' }} >\r\n                  <Header.Content>\r\n                    COVID-19 <b>deaths</b> in {countyName}\r\n                  </Header.Content>\r\n                </Header>\r\n                <Grid.Row style={{ paddingTop: '1em' }}>\r\n                  <Grid.Column width={16} style={{ paddingLeft: '0', paddingRight: '0' }}>\r\n\r\n                    <Table celled fixed singleLine>\r\n                      <Table.Header>\r\n                        <Table.Row textAlign='center'\r\n\r\n                        >\r\n                          <Table.HeaderCell colSpan='1' style={{ width: 150 }}> </Table.HeaderCell>\r\n                          <Popup\r\n                            trigger={\r\n                              <Table.HeaderCell style={{ width: 200 }}> ALL DEATHS TO DATE</Table.HeaderCell>}\r\n                            content={\"All confirmed deaths reported to DPH as of \" + new Date(dateCur.date * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' })}\r\n                            basic />\r\n                          <Popup\r\n                            trigger={\r\n                              <Table.HeaderCell style={{ width: 230 }}> DEATHS IN PAST 14 DAYS</Table.HeaderCell>}\r\n                            content={\"All confirmed deaths reported to DPH during the 14 days preceding the report publication date.\"}\r\n                            basic />\r\n                          <Popup\r\n                            trigger={\r\n                              <Table.HeaderCell style={{ width: 200 }}> DEATHS PER 100K (PAST 14 DAYS)</Table.HeaderCell>}\r\n                            content={\"14-day deaths count/100K residents based on 2020 population projects derived from census data.\"}\r\n                            basic />\r\n                          <Popup\r\n                            trigger={\r\n                              <Table.HeaderCell style={{ width: 200 }}> CASE FATALITY RATIO (%)</Table.HeaderCell>}\r\n                            content={\"The case fatality ratio is the percent of all confirmed cases who have been reported as having died. While this is used as a measure of disease severity, the ratio may also be affected by the level of testing and quality of follow-up data on cases.\"}\r\n                            basic />\r\n                        </Table.Row>\r\n\r\n                        <Table.Row textAlign='center'>\r\n                          <Table.HeaderCell style={{ fontSize: '18px' }}> {countyName} </Table.HeaderCell>\r\n                          <Table.HeaderCell style={{ fontSize: '27px' }}>{covidMetric.deathscum === null || covidMetric.deathscum < 0 ? '0' : covidMetric.deathscum.toLocaleString()}</Table.HeaderCell>\r\n                          <Table.HeaderCell style={{ fontSize: '27px' }}>{covidMetric.deathscum14day === null || covidMetric.deathscum14day < 0 ? '0' : numberWithCommas(parseFloat(covidMetric.deathscum14day).toFixed(0)).toLocaleString()}</Table.HeaderCell>\r\n                          <Table.HeaderCell style={{ fontSize: '27px' }}>{covidMetric.deathscum14dayR === null || covidMetric.deathscum14dayR < 0 ? '0' : numberWithCommas(parseFloat(covidMetric.deathscum14dayR).toFixed(2)).toLocaleString()}</Table.HeaderCell>\r\n                          <Table.HeaderCell style={{ fontSize: '27px' }}>{covidMetric.cfr === null || covidMetric.cfr < 0 ? '0' : numberWithCommas(parseFloat(covidMetric.cfr).toFixed(2)).toLocaleString() + '%'}</Table.HeaderCell>\r\n                        </Table.Row>\r\n                        <Table.Row textAlign='center'>\r\n                          <Table.HeaderCell style={{ fontSize: '18px' }}>Georgia</Table.HeaderCell>\r\n                          <Table.HeaderCell style={{ fontSize: '27px' }}>{covidMetricGa.deathscum === null || covidMetricGa.deathscum < 0 ? '0' : covidMetricGa.deathscum.toLocaleString()}</Table.HeaderCell>\r\n                          <Table.HeaderCell style={{ fontSize: '27px' }}>{covidMetricGa.deathscum14day === null || covidMetricGa.deathscum14day < 0 ? '0' : numberWithCommas(parseFloat(covidMetricGa.deathscum14day).toFixed(0)).toLocaleString()}</Table.HeaderCell>\r\n                          <Table.HeaderCell style={{ fontSize: '27px' }}>{covidMetricGa.deathscum14dayR === null || covidMetricGa.deathscum14dayR < 0 ? '0' : numberWithCommas(parseFloat(covidMetricGa.deathscum14dayR).toFixed(2)).toLocaleString()}</Table.HeaderCell>\r\n                          <Table.HeaderCell style={{ fontSize: '27px' }}>{covidMetricGa.cfr === null || covidMetricGa.cfr < 0 ? '0' : numberWithCommas(parseFloat(covidMetricGa.cfr).toFixed(2)).toLocaleString() + '%'}</Table.HeaderCell>\r\n                        </Table.Row>\r\n                      </Table.Header>\r\n                    </Table>\r\n                  </Grid.Column>\r\n\r\n                </Grid.Row>\r\n\r\n                <Grid.Row style={{ paddingTop: 0 }}>\r\n                  <Grid.Column style={{ paddingLeft: '0.01', paddingRight: '0' }}>\r\n                    <small style={{ fontWeight: 300, fontSize: 16, color: 'black' }} align=\"justify\">\r\n                      As of {dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' : (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}, there were a total of {covidMetric.casescum.toLocaleString()} confirmed cases of COVID-19 and {covidMetric.deathscum.toLocaleString()} deaths due to COVID-19 reported to DPH for {countyName}. In {countyName}, this translates to {numberWithCommas(parseFloat(covidMetric.casescumR).toFixed(0)).toLocaleString()} case(s) per 100,000 residents and {numberWithCommas(parseFloat(covidMetric.deathscumR).toFixed(0)).toLocaleString()} death(s) per 100,000 residents.\r\n                        On a day-to-day basis, {numberWithCommas(parseFloat(covidMetric.casesdailymean7).toFixed(0)).toLocaleString()} new cases and {numberWithCommas(parseFloat(covidMetric.deathsdailymean7).toFixed(0)).toLocaleString()} new deaths are reported to DPH on average (based on a 14-day rolling average). This means that there are {covidMetric.casesdailymean7 === null || covidMetric.casesdailymean7 < 0 ? '0' : numberWithCommas(parseFloat(covidMetric.casesdailymean7).toFixed(0)).toLocaleString()} new cases and {covidMetric.deathsdailymean7 === null || covidMetric.deathsdailymean7 < 0 ? '0' : numberWithCommas(parseFloat(covidMetric.deathsdailymean7).toFixed(0)).toLocaleString()} new deaths per 100,000 residents in {countyName}. The case-fatality ratio measures\r\n                          the proportion of confirmed COVID-19 cases that ultimately die due to the disease. This is used by epidemiologists to gauge the severity of disease in a particular locale.  In {countyName}, the case-fatality ratio was {covidMetric.cfr === null || covidMetric.cfr < 0 ? '0' : numberWithCommas(parseFloat(covidMetric.cfr).toFixed(2)).toLocaleString() + '%'}, which is {covidMetric.cfrcompare === null || covidMetric.cfrcompare < 0 ? '0' : covidMetric.cfrcompare} than the national average of 4%. All of these data must be interpreted in light of constraints on testing, PUI follow-up quality, and reporting lags in the county.\r\n                  </small>\r\n                  </Grid.Column>\r\n                </Grid.Row>\r\n              </Grid>\r\n\r\n              <Divider horizontal style={{ fontWeight: 300, color: '#b1b3b3', fontSize: '1.2em', paddingTop: '1em' }}></Divider>\r\n              <Grid column={2} style={{ paddingTop: '2em', paddingBottom: '2em', width: \"1260px\" }}>\r\n                <Grid.Row style={{ paddingTop: '2em' }}>\r\n\r\n                  <Grid.Column width={8}>\r\n                    <Header as='h2' style={{ fontWeight: \"bold\", fontSize: \"27px\", paddingLeft: \".5em\" }}>\r\n                      <Header.Content>\r\n                        Daily cases in {countyName}\r\n                        <Header.Subheader style={{ fontWeight: 300 }}>\r\n                        </Header.Subheader>\r\n                      </Header.Content>\r\n                    </Header>\r\n                    <svg width=\"550\" height=\"90\">\r\n                      <rect x={50} y={50} width=\"15\" height=\"15\" style={{ fill: stateColor, strokeWidth: 1, stroke: stateColor }} />\r\n                      <rect x={50} y={22} width=\"15\" height=\"1\" style={{ fill: countyColor, strokeWidth: 1, stroke: countyColor }} />\r\n                      <text x={75} y={64} style={{ fontSize: 18 }}> Daily new cases </text>\r\n                      <text x={75} y={30} style={{ fontSize: 18 }}>7-D Rolling average</text>\r\n                    </svg>\r\n                    <VictoryChart theme={VictoryTheme.material}\r\n                      containerComponent={\r\n                        <VictoryVoronoiContainer\r\n                          voronoiBlacklist={[\"Line14\", \"Line\"]}\r\n                          labels={({ datum }) => `${new Date(datum.t * 1000).toLocaleDateString()}\\n` + `Daily new cases: ${Math.round(datum.casesdaily, 2)}\\n` + `7-d Rolling average of daily new cases: ${Math.round(datum.casesdailymean7, 2)}`}\r\n                          labelComponent={\r\n                            <VictoryTooltip dy={-7} constrainToVisibleArea\r\n                              style={{ fontSize: 15 }} />\r\n                          }\r\n                        />\r\n                      }\r\n                      width={550}\r\n                      height={450}\r\n                      padding={{ left: 40, right: 60, top: 10, bottom: 60 }}>\r\n                      {/* <VictoryLabel style={{\r\n                        textAnchor: \"start\",\r\n                        verticalAnchor: \"end\", fontFamily: \"inherit\",\r\n                        fontSize: \"27px\", fontWeight: \"bold\"\r\n                      }} text={\" Daily new cases in \" + countyName} x={15} y={28} textAnchor=\"middle\" /> */}\r\n                      {/* <VictoryLegend\r\n                        style={{ labels: { fontSize: 16 } }}\r\n                        x={30} y={35}\r\n                        orientation=\"vertical\"\r\n                        colorScale={[stateColor, countyColor]}\r\n                        data={[\r\n                          { name: \"Daily new cases\",symbol: {type: \"square\" } }, { name: \"7-D Rolling average\",symbol: {type: \"minus\" } }\r\n                        ]}\r\n                      /> */}\r\n\r\n                      <VictoryAxis\r\n                        style={{\r\n                          tickLabels: { fontSize: 20, padding: 5 }\r\n                        }}\r\n                        tickFormat={(t) => new Date(t * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric' })}\r\n                        tickValues={[\r\n                          1583035200, 1585713600, 1588305600, 1590984000, 1593576000\r\n                        ]}\r\n                      // tickValues={[\r\n                      //   dataTS[stateFips + countyFips][dataTS[stateFips + countyFips].length - Math.round(dataTS[stateFips + countyFips].length / 4) * 3 - 1].t,\r\n                      //   dataTS[stateFips + countyFips][dataTS[stateFips + countyFips].length - Math.round(dataTS[stateFips + countyFips].length / 4) * 2 - 1].t,\r\n                      //   dataTS[stateFips + countyFips][dataTS[stateFips + countyFips].length - Math.round(dataTS[stateFips + countyFips].length / 4) - 1].t,\r\n                      //   dataTS[stateFips + countyFips][dataTS[stateFips + countyFips].length - 1].t]} \r\n                      />\r\n                      <VictoryAxis dependentAxis tickCount={5}\r\n                        style={{\r\n                          tickLabels: { fontSize: 17, paddingLeft: '0em' }\r\n                        }}\r\n                        tickFormat={(y) => (y < 1000 ? y : (y / 1000 + 'k'))}\r\n                      />\r\n\r\n                      <VictoryBar style={{ data: { fill: stateColor } }} barWidth={4} data={dataTS[stateFips + countyFips] ? _.take(dataTS[stateFips + countyFips], 141) : dataTS[\"99999\"]}\r\n                        x='t' y='casesdaily'\r\n                      />\r\n                      <VictoryLine name=\"Line\" style={{ data: { stroke: countyColor } }} data={dataTS[stateFips + countyFips] ? _.take(dataTS[stateFips + countyFips], 141) : dataTS[\"99999\"]}\r\n                        x='t' y='casesdailymean7'\r\n                      />\r\n                      {/* <VictoryLine name=\"Line14\"\r\n                        style={{ data: { stroke: 'red', strokeDasharray: \"5,5\" } }}\r\n                        x={() => covidMetric14.t}\r\n                        samples={1}\r\n                        labelComponent={<VictoryLabel renderInPortal dx={20} dy={-20} />} /> */}\r\n                      {/* <VictoryLine name=\"Line14\" style={{ data: { stroke: 'red' , strokeDasharray:\"5,5\"} }} data={[{x:covidMetric14.t, y:0},{x:covidMetric14.t, y:Math.round(legendMax_graph)}] }\r\n                      /> */}\r\n                    </VictoryChart>\r\n                  </Grid.Column>\r\n                  <Grid.Column width={8}>\r\n                    <Header as='h2' style={{ fontWeight: \"bold\", fontSize: \"27px\", paddingLeft: \".5em\" }}>\r\n                      <Header.Content>\r\n                        Daily deaths in {countyName}\r\n                        <Header.Subheader style={{ fontWeight: 300 }}>\r\n                        </Header.Subheader>\r\n                      </Header.Content>\r\n                    </Header>\r\n                    <svg width=\"550\" height=\"90\">\r\n                      <rect x={50} y={50} width=\"15\" height=\"15\" style={{ fill: stateColor, strokeWidth: 1, stroke: stateColor }} />\r\n                      <rect x={50} y={22} width=\"15\" height=\"1\" style={{ fill: countyColor, strokeWidth: 1, stroke: countyColor }} />\r\n                      <text x={75} y={64} style={{ fontSize: 18 }}> Daily new deaths </text>\r\n                      <text x={75} y={30} style={{ fontSize: 18 }}>7-D Rolling average</text>\r\n                    </svg>\r\n                    <VictoryChart theme={VictoryTheme.material}\r\n                      containerComponent={\r\n                        <VictoryVoronoiContainer\r\n                          voronoiBlacklist={[\"Line\", \"Line14\"]}\r\n                          labels={({ datum }) => `${new Date(datum.t * 1000).toLocaleDateString()}\\n` + `Daily new deaths: ${Math.round(datum.deathsdaily, 2)}\\n` + `7-d Rolling average of daily new deaths: ${Math.round(datum.deathsdailymean7, 2)}`}\r\n                          labelComponent={\r\n                            <VictoryTooltip dy={-7} constrainToVisibleArea\r\n                              style={{ fontSize: 15 }} />\r\n                          }\r\n                        />\r\n                      }\r\n                      width={550}\r\n                      height={450}\r\n                      padding={{ left: 30, right: 60, top: 10, bottom: 60 }}>\r\n                      {/* <VictoryLabel style={{\r\n                        textAnchor: \"start\",\r\n                        verticalAnchor: \"end\", fill: \"#000000\", fontFamily: \"inherit\",\r\n                        fontSize: \"28px\", fontWeight: \"bold\"\r\n                      }} text={\"Daily new deaths in \" + countyName} x={15} y={28} textAnchor=\"middle\" /> */}\r\n                      {/* <VictoryLegend\r\n                        style={{ labels: { fontSize: 16 } }}\r\n                        x={30} y={35}\r\n                        orientation=\"vertical\"\r\n                        colorScale={[stateColor, countyColor]}\r\n                        data={[\r\n                          { name: \"Daily new deaths\" }, { name: \"7-d Rolling average\" }\r\n                        ]}\r\n                      /> */}\r\n                      <VictoryAxis\r\n                        style={{\r\n                          tickLabels: { fontSize: 20, padding: 5 }\r\n                        }}\r\n                        tickFormat={(t) => new Date(t * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric' })}\r\n                        tickValues={[\r\n                          1583035200, 1585713600, 1588305600, 1590984000, 1593576000\r\n                        ]}\r\n                      // tickValues={[\r\n                      //   dataTS[stateFips + countyFips][dataTS[stateFips + countyFips].length - Math.round(dataTS[stateFips + countyFips].length / 4) * 3 - 1].t,\r\n                      //   dataTS[stateFips + countyFips][dataTS[stateFips + countyFips].length - Math.round(dataTS[stateFips + countyFips].length / 4) * 2 - 1].t,\r\n                      //   dataTS[stateFips + countyFips][dataTS[stateFips + countyFips].length - Math.round(dataTS[stateFips + countyFips].length / 4) - 1].t,\r\n                      //   dataTS[stateFips + countyFips][dataTS[stateFips + countyFips].length - 1].t]} \r\n                      />\r\n                      <VictoryAxis dependentAxis tickCount={5}\r\n                        style={{\r\n                          tickLabels: { fontSize: 20, padding: 5 }\r\n                        }}\r\n                        tickFormat={(y) => (y < 1000 ? y : (y / 1000 + 'k'))}\r\n                      />\r\n\r\n                      <VictoryBar style={{ data: { fill: stateColor } }} barWidth={4} data={dataTS[stateFips + countyFips] ? _.take(dataTS[stateFips + countyFips], 141) : dataTS[\"99999\"]}\r\n                        x='t' y='deathsdaily'\r\n                      />\r\n                      <VictoryLine name=\"Line\" style={{ data: { stroke: countyColor } }} data={dataTS[stateFips + countyFips] ? _.take(dataTS[stateFips + countyFips], 141) : dataTS[\"99999\"]}\r\n                        x='t' y='deathsdailymean7'\r\n                      />\r\n                      {/* <VictoryLine name=\"Line14\"\r\n                        style={{ data: { stroke: 'red', strokeDasharray: \"5,5\" } }}\r\n                        x={() => covidMetric14.t}\r\n                        samples={1}\r\n                        labelComponent={<VictoryLabel renderInPortal dx={20} dy={-20} />} /> */}\r\n                      {/* <VictoryLine name=\"Line14\" style={{ data: { stroke: 'red' , strokeDasharray:\"5,5\"} }} data={[{x:covidMetric14.t, y:0},{x:covidMetric14.t, y:Math.round(legendMax_graph)}] }\r\n                      /> */}\r\n                    </VictoryChart>\r\n                  </Grid.Column>\r\n                </Grid.Row>\r\n                <Grid.Row style={{ paddingTop: '2em', paddingLeft: '0em', paddingRight: '2em' }} >\r\n                  <Grid.Column width={8} style={{ paddingLeft: '1em', paddingRight: '3em' }}>\r\n                    <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\r\n                      As of {covidMetricLast.t === 'n/a' ? 'N/A' : (new Date(covidMetricLast.t * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}, this chart shows the daily number of new cases of confirmed COVID-19 in <b>{countyName}</b>. The daily number reflects the date the case was first reported to DPH.\r\n                  The vertical bars show the number of new daily cases while the line shows the 7-day moving average of new daily cases.\r\n                  </small>\r\n                  </Grid.Column>\r\n                  <Grid.Column width={8} style={{ paddingLeft: '3em', paddingRight: '3em' }}>\r\n                    <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\r\n                      As of {covidMetricLast.t === 'n/a' ? 'N/A' : (new Date(covidMetricLast.t * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))}, this chart shows the daily number of new deaths of confirmed COVID-19 in <b>{countyName}</b>. The daily number reflects the date the death was first reported to DPH.\r\n                  The vertical bars show the number of new daily deaths while the line shows the 7-day moving average of new daily cases.\r\n                  </small>\r\n                  </Grid.Column>\r\n                </Grid.Row>\r\n                <Grid.Row style={{ paddingTop: '8em' }}>\r\n                  <Grid.Column width={9}>\r\n                    <Header as='h2' style={{ fontWeight: 400, paddingLeft: '1em' }}>\r\n                      <Header.Content >\r\n                        <strong>Confirmed COVID-19 cases {countyName} by zip code</strong>\r\n                        {/* <Header.Subheader style={{fontWeight: 300}}>.</Header.Subheader> */}\r\n                      </Header.Content>\r\n                    </Header>\r\n                    <svg width=\"120\" height=\"300\" style={{ paddingLeft: '3.5em' }}>\r\n                      {_.map(colorPalette, (color, i) => {\r\n                        return <rect key={i} y={20 * i} x={25} width=\"20\" height=\"20\" style={{ fill: colorPalette[(colorPalette.length - 1 - i).toString()], strokeWidth: 1, stroke: colorPalette[(colorPalette.length - 1 - i).toString()] }} />\r\n                      })}\r\n                      {/* <text y={15} x={47} style={{fontSize: '0.8em'}}>High</text>\r\n                  <text y={20 * (colorPalette.length)} x={47} style={{fontSize: '0.8em'}}>Low</text> */}\r\n                      {/* {_.map(legendSplit, (splitpoint, i) => {\r\n                        if (legendSplit[i] < 1) {\r\n                          return <text key={i} y={21 * (legendSplit.length - i)} x={47} style={{ fontSize: '0.8em' }}> {legendSplit[i].toFixed(1)}</text>\r\n                        }\r\n                        return <text key={i} y={21 * ((legendSplit.length - i))} x={47} style={{ fontSize: '0.8em' }}> {legendSplit[i].toFixed(0)}</text>\r\n                      })} */}\r\n                      <text y={20 * (colorPalette.length)} x={47} style={{ fontSize: '0.8em' }}> {legendMin} </text>\r\n                      <text y={8} x={47} style={{ fontSize: '0.8em' }}>{legendMax}</text>\r\n                    </svg>\r\n\r\n                    <ComposableMap projection=\"geoAlbersUsa\"\r\n                      style={{ paddingLeft: '2em' }}\r\n                      projectionConfig={{ scale: `${configsCounty.scale}` }}\r\n                      width={500}\r\n                      height={350}\r\n                      data-tip=\"\"\r\n                      offsetX={configsCounty.offsetX}\r\n                      offsetY={configsCounty.offsetY}>\r\n                      <Geographies geography={configsCounty.url}>\r\n                        {({ geographies }) => geographies.map(geo =>\r\n                          <Geography\r\n                            key={geo.rsmKey}\r\n                            geography={geo}\r\n                            style={{\r\n                              default: {\r\n                                stroke: \"#607D8B\",\r\n                                strokeWidth: 0.95,\r\n                                outline: \"none\",\r\n                              }\r\n                            }}\r\n                            onMouseEnter={(event) => {\r\n                              // console.log(event);\r\n                              // setCountyFips(geo.properties.COUNTYFP);\r\n                              setCountyName(fips2county[stateFips + geo.properties.COUNTYFP]);\r\n                              setZipCode(geo.properties.ZCTA5CE10);\r\n                              setZipCodeFinal(geo.properties.ZCTA5CE10);\r\n                              setTooltipContent(<div><font size=\"+2\"><b >{geo.properties.ZCTA5CE10}</b> </font> <br />\r\n                                {/* <b>Total Cases</b>: {dataZip[geo.properties.ZCTA5CE10]['casescum']} <br />\r\n                                <b>Total Deaths</b>: {dataZip[geo.properties.ZCTA5CE10]['deathscum']} <br /> */}\r\n                              </div>);\r\n                            }}\r\n                            onMouseLeave={(event) => {\r\n                              setTooltipContent(\"\")\r\n                            }}\r\n                            fill={zipCode === geo.properties.ZCTA5CE10 ? countyColor :\r\n                              ((colorScale && dataZip[geo.properties.ZCTA5CE10] && dataZip[geo.properties.ZCTA5CE10]['casescum']) ?\r\n                                colorScale[dataZip[geo.properties.ZCTA5CE10]['casescum']] : colorPalette[0])}\r\n                          />\r\n                        )}\r\n                      </Geographies>\r\n                    </ComposableMap>\r\n                  </Grid.Column>\r\n\r\n                </Grid.Row>\r\n                \r\n\r\n                <Grid.Row style={{ paddingTop: '2em', paddingLeft: '0em', paddingRight: '2em' }} >\r\n                \r\n                  <Grid.Column width={9} style={{ paddingLeft: '2em', paddingRight: '5em' }}>\r\n                    <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\r\n                      {varNameMap['casescum'].text}{dateCur[stateFips + countyFips].todaydate === 'n/a' ? 'N/A' : (new Date(dateCur[stateFips + countyFips].todaydate * 1000).toLocaleDateString('en-Us', { month: 'short', day: 'numeric', year: 'numeric' }))} . The darker shading indicates a larger number of {varNameMap['casescum'].name}.</small>\r\n                  </Grid.Column>\r\n\r\n                </Grid.Row>\r\n                <Grid.Row style={{ paddingTop: 0 }}>\r\n                  <small style={{ fontWeight: 300, color: 'black' }}>\r\n                    Note: Data are provisional and subject to change. Zip codes may cross county boundaries. Zip codes being displayed include the total count of cases for that zip code.\r\n                    </small>\r\n                </Grid.Row>\r\n              </Grid>\r\n              <Divider horizontal style={{ fontWeight: 600, color: '#232423', fontSize: '16pt', paddingTop: '1em' }}>Characteristics of confirmed cases for {countyName}</Divider>\r\n              <Grid columns={2} style={{ width: \"1260px\" }} centered>\r\n                <Grid.Row >\r\n                  <Grid.Column>\r\n                    <svg width=\"400\" height=\"500\" >\r\n                      <VictoryLabel style={{\r\n                        textAnchor: \"start\",\r\n                        verticalAnchor: \"end\", fill: \"#000000\", fontFamily: \"inherit\",\r\n                        fontSize: \"20px\", fontWeight: \"bold\"\r\n                      }} text=\"Proportion of cases with a comorbidity\r\n                  \" x={15} y={28} textAnchor=\"middle\" />\r\n                      <VictoryPie\r\n                        colorScale={['Gray', 'GoldenRod']}\r\n                        standalone={false}\r\n                        style={{ labels: { fill: \"white\" } }}\r\n                        labelRadius={80}\r\n                        width={400} height={400}\r\n                        padAngle={1}\r\n                        data={[\r\n                          { x: \"Cats\", y: 22, label: \"22%\" },\r\n                          { x: \"Dogs\", y: 78, label: \"78%\" },\r\n                        ]}\r\n                      />\r\n                      <VictoryLegend\r\n                        standalone={false}\r\n                        colorScale={['Gray', 'GoldenRod']}\r\n                        x={150} y={350}\r\n                        data={[{ name: \"No underlying conditions\", labels: { fontSize: 18 } },\r\n                        { name: \"Underlying health condition\", labels: { fontSize: 18 } }\r\n                        ]}\r\n                      />\r\n                    </svg>\r\n                  </Grid.Column>\r\n                  <Grid.Column style={{ paddingLeft: '2em', paddingRight: '1em', paddingTop: '8em' }}>\r\n                    <small style={{ fontWeight: 300, fontSize: 20, color: 'black' }} align=\"justify\">\r\n                      The pie chart shows the proportion of confirmed COVID-19 cases in <b>{countyName}</b> who\r\n                  presented with an underlying medical condition. Underlying medical conditions\r\n                  increase the risk of experiencing severe disease which may lead to hospitalization\r\n                  and death. Of the {datades_cases[stateFips + countyFips]['cdc_underlying2_N'] ? datades_cases[stateFips + countyFips]['cdc_underlying2_N'] : \"N/A\"} confirmed cases, {datades_cases[stateFips + countyFips]['cdc_underlying2Percent'] ? datades_cases[stateFips + countyFips]['cdc_underlying2Percent'].toFixed(2) : \"N/A\"}% had an underlying comorbidity using the CDC definition.The chart excludes data from {datades_cases[stateFips + countyFips]['cdc_underlying2Pmiss'] ? datades_cases[stateFips + countyFips]['cdc_underlying2Pmiss'].toFixed(2) : \"N/A\"}% of confirmed COVID-19 cases whose medical history was unknown.\r\n                    </small>\r\n                  </Grid.Column>\r\n\r\n                </Grid.Row>\r\n              </Grid>\r\n              <Divider horizontal style={{ fontWeight: 600, color: '#232423', fontSize: '16pt', paddingTop: '1em', paddingBottom: \"0em\" }}>Confirmed cases per capita by demographic group in {countyName}</Divider>\r\n              <Grid style={{ width: \"1260px\" }}>\r\n                {datades_cases[stateFips + countyFips]['NObs'] < 50 && datades_cases[stateFips + countyFips]['outcome'] === 'COVID Death' ?\r\n                  <Header as='h2' style={{ fontWeight: 400 }}>\r\n                    <Header.Content>\r\n                      <Header.Subheader style={{ fontWeight: 300, fontSize: '16pt', color: 'black' }}>\r\n                        Rates broken down by age, sex, and race are not shown for {countyName} because there are fewer than 50 confirmed COVID-19 cases with complete information.\r\n                </Header.Subheader>\r\n                    </Header.Content>\r\n                  </Header>\r\n                  :\r\n                  <Grid.Row columns={3} style={{ paddingTop: 0 }}>\r\n                    <Grid.Column>\r\n                      <BarChart\r\n                        title=\"Age Group\"\r\n                        keyv={[\"< 18\", \"18-44\", \"45-64\", \"65+\"]}\r\n                        var={[\"rate017ageC\", \"rate1844ageC\", \"rate4564ageC\", \"rate65ageC\"]}\r\n                        width={400}\r\n                        stateFips={stateFips}\r\n                        countyFips={countyFips}\r\n                        data={data_cases} />\r\n                    </Grid.Column>\r\n                    <Grid.Column>\r\n                      <BarChart\r\n                        title=\"Sex\"\r\n                        keyv={[\"Female\", \"Male\"]}\r\n                        var={[\"female_rateC\", \"male_rateC\"]}\r\n                        pad={25}\r\n                        width={400}\r\n                        stateFips={stateFips}\r\n                        countyFips={countyFips}\r\n                        data={data_cases} />\r\n                    </Grid.Column>\r\n                    <Grid.Column>\r\n                      <BarChart\r\n                        title=\"Race\"\r\n                        keyv={[\"Other\", \"Hispanic\", \"Black\", \"White\"]}\r\n                        var={[\"otherNH_rateC\", \"hispanic_rateC\", \"black_rateC\", \"white_rateC\"]}\r\n                        width={400}\r\n                        stateFips={stateFips}\r\n                        countyFips={countyFips}\r\n                        data={data_cases} />\r\n                    </Grid.Column>\r\n                  </Grid.Row>\r\n                }\r\n                {datades_cases[stateFips + countyFips]['NObs'] < 50 && datades_cases[stateFips + countyFips]['outcome'] === 'COVID Death' ? ' ' :\r\n                  <Grid.Row columns={3} style={{ padding: 0 }}>\r\n                    <Grid.Column style={{ paddingLeft: '3em', paddingRight: '0em' }}>\r\n                      <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\r\n                        This chart shows the number of total cases per 100,000 residents by age group for <b>{countyName}</b>. The chart excludes data from {datades_cases[stateFips + countyFips]['age4catPmiss'].toFixed(2)}% of confirmed cases who were missing information on age.\r\n                    </small>\r\n                    </Grid.Column>\r\n                    <Grid.Column style={{ paddingLeft: '2em', paddingRight: '0em' }}>\r\n                      <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\r\n                        This chart shows the number of total cases per 100,000 residents by sex for <b>{countyName}</b>. The chart excludes data from {datades_cases[stateFips + countyFips]['femalePmiss'].toFixed(2)}% of confirmed cases who were missing information on sex.\r\n                    </small>\r\n                    </Grid.Column>\r\n                    <Grid.Column style={{ paddingLeft: '2em', paddingRight: '0em' }}>\r\n                      <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\r\n                        This chart shows the total cases per 100,000 residents by race/ethnicity for <b>{countyName}</b>. The chart excludes data from {datades_cases[stateFips + countyFips]['race_3Pmiss'].toFixed(2)}% of confirmed cases who were missing information on race/ethnicity.                    </small>\r\n                    </Grid.Column>\r\n                  </Grid.Row>}\r\n              </Grid>\r\n\r\n              <Divider horizontal style={{ fontWeight: 600, color: '#232423', fontSize: '16pt', paddingTop: '1em', paddingBottom: \"0em\" }}>Deaths per capita by demographic group in {countyName}</Divider>\r\n              <Grid style={{ width: \"1260px\" }}>\r\n                {!(datades_deaths[stateFips + countyFips]) ? <Header as='h2' style={{ fontWeight: 400, paddingTop: '0.5em' }}>\r\n                  <Header.Content>\r\n                    <Header.Subheader style={{ fontWeight: 300, fontSize: '16pt' }}>\r\n                      Rates broken down by age, sex, and race are not shown for {countyName} because there are fewer than 50 confirmed COVID-19 deaths with complete information.\r\n                    </Header.Subheader>\r\n                  </Header.Content>\r\n                </Header>\r\n                  :\r\n                  datades_deaths[stateFips + countyFips]['NObs'] < 50 && datades_deaths[stateFips + countyFips]['outcome'] === 'COVID Death' ?\r\n                    <Header as='h2' style={{ fontWeight: 400, paddingTop: '0.5em' }}>\r\n                      <Header.Content>\r\n                        <Header.Subheader style={{ fontWeight: 300, fontSize: '16pt' }}>\r\n                          Rates broken down by age, sex, and race are not shown for {countyName} because there are fewer than 50 confirmed COVID-19 deaths with complete information.\r\n                    </Header.Subheader>\r\n                      </Header.Content>\r\n                    </Header>\r\n                    :\r\n                    <Grid.Row columns={3} style={{ paddingTop: 0 }}>\r\n                      <Grid.Column>\r\n                        <BarChart\r\n                          title=\"Age Group\"\r\n                          keyv={[\"< 18\", \"18-44\", \"45-64\", \"65+\"]}\r\n                          var={[\"rate017ageD\", \"rate1844ageD\", \"rate4564ageC\", \"rate65ageD\"]}\r\n                          width={400}\r\n                          stateFips={stateFips}\r\n                          countyFips={countyFips}\r\n                          data={data_deaths} />\r\n                      </Grid.Column>\r\n                      <Grid.Column>\r\n                        <BarChart\r\n                          title=\"Sex\"\r\n                          keyv={[\"Female\", \"Male\"]}\r\n                          var={[\"female_rateD\", \"male_rateD\"]}\r\n                          width={400}\r\n                          pad={25}\r\n                          stateFips={stateFips}\r\n                          countyFips={countyFips}\r\n                          data={data_deaths} />\r\n                      </Grid.Column>\r\n                      <Grid.Column>\r\n                        <BarChart\r\n                          title=\"Race\"\r\n                          keyv={[\"Other\", \"Hispanic\", \"Black\", \"White\"]}\r\n                          var={[\"otherNH_rateD\", \"hispanic_rateD\", \"black_rateD\", \"white_rateD\"]}\r\n                          width={400}\r\n                          stateFips={stateFips}\r\n                          countyFips={countyFips}\r\n                          data={data_deaths} />\r\n                      </Grid.Column>\r\n                    </Grid.Row>}\r\n                {!(datades_deaths[stateFips + countyFips]) ? ' ' :\r\n\r\n\r\n                  datades_deaths[stateFips + countyFips]['NObs'] < 50 && datades_deaths[stateFips + countyFips]['outcome'] === 'COVID Death' ? ' ' :\r\n                    <Grid.Row columns={3} style={{ padding: 0 }}>\r\n                      <Grid.Column style={{ paddingLeft: '3em', paddingRight: '0em' }}>\r\n                        <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\r\n                          This chart shows the number of total deaths per 100,000 residents by age group for <b>{countyName}</b>. The chart excludes data from {datades_deaths[stateFips + countyFips]['age4catPmiss'].toFixed(2)}% of confirmed deaths who were missing information on age.\r\n                    </small>\r\n                      </Grid.Column>\r\n                      <Grid.Column style={{ paddingLeft: '2em', paddingRight: '0em' }}>\r\n                        <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\r\n                          This chart shows the number of total deaths per 100,000 residents by sex for <b>{countyName}</b>. The chart excludes data from {datades_deaths[stateFips + countyFips]['femalePmiss'].toFixed(2)}% of confirmed deaths who were missing information on sex.\r\n                    </small>\r\n                      </Grid.Column>\r\n                      <Grid.Column style={{ paddingLeft: '2em', paddingRight: '0em' }}>\r\n                        <small style={{ fontWeight: 300, fontSize: 18, color: 'black' }} align=\"justify\">\r\n                          This chart shows the total deaths per 100,000 residents by race/ethnicity for <b>{countyName}</b>. The chart excludes data from {datades_deaths[stateFips + countyFips]['race_3Pmiss'].toFixed(2)}% of confirmed deaths who were missing information on race/ethnicity.                    </small>\r\n                      </Grid.Column>\r\n                    </Grid.Row>}\r\n              </Grid>\r\n              <Divider horizontal style={{ fontWeight: 600, color: '#232423', fontSize: '16pt', paddingTop: '1em' }}>{countyName} characteristics</Divider>\r\n              <Header as='h2' style={{ fontWeight: 400 }}>\r\n                <Header.Content>\r\n                  <Header.Subheader style={{ fontWeight: 300, fontSize: '16pt', color: 'black' }}>\r\n                    Social, economic, health and environmental factors impact an individual’s risk of infection and COVID-19 severity.\r\n                    Counties with large groups of vulnerable people may be disproportionately impacted by COVID-19. The table below characterizes <b>{countyName}</b>, Georgia, and the United States.\r\n                    </Header.Subheader>\r\n                </Header.Content>\r\n              </Header>\r\n              <small style={{ fontWeight: 300, color: 'black' }}>\r\n                <div>Note: These are not characteristics of covid.</div>\r\n              </small>\r\n              <Table striped compact basic='very'>\r\n                <Table.Header>\r\n                  <Table.Row>\r\n                    <Table.HeaderCell>Characteristic</Table.HeaderCell>\r\n                    <Table.HeaderCell>{countyName}</Table.HeaderCell>\r\n                    <Table.HeaderCell>{stateName}</Table.HeaderCell>\r\n                    <Table.HeaderCell>United States</Table.HeaderCell>\r\n                  </Table.Row>\r\n                </Table.Header>\r\n                <Table.Body>\r\n                  {_.map(data[stateFips + countyFips],\r\n                    (v, k) => {\r\n                      var rmList = [\"cases\", \"deaths\", \"dailycases\", \"dailydeaths\", \"mean7daycases\", \"mean7daydeaths\", \"covidmortality\"\r\n                        , \"caserate\", \"covidmortality7day\", \"caserate7day\"];\r\n                      if (!rmList.includes(k)) {\r\n                        return (\r\n                          <Table.Row key={k}>\r\n                            <Table.Cell>{varMap[k] ? varMap[k].name : k}</Table.Cell>\r\n                            <Table.Cell>{isNaN(v) ? v : (Math.round(v * 100) / 100)}</Table.Cell>\r\n                            <Table.Cell>{isNaN(data[stateFips][k]) ? data[stateFips][k] : (Math.round(data[stateFips][k] * 100) / 100)}</Table.Cell>\r\n                            <Table.Cell>{isNaN(data['_nation'][k]) ? data['_nation'][k] : (Math.round(data['_nation'][k] * 100) / 100)}</Table.Cell>\r\n                          </Table.Row>\r\n                        )\r\n                      }\r\n                    })}\r\n                </Table.Body>\r\n              </Table>\r\n            </div>\r\n          }\r\n          {/* <Divider horizontal style={{ fontWeight: 300, color: '#b1b3b3', fontSize: '1.2em', paddingTop: '1em' }}></Divider> */}\r\n          <small>\r\n            <div style={{ paddingTop: '1em', paddingBottom: '1em' }}><a href=\"/data-sources\">Data source and interpretation</a></div>\r\n          </small>\r\n        </Container>\r\n        <ReactTooltip>{tooltipContent}</ReactTooltip>\r\n\r\n      </div>\r\n    );\r\n  } else {\r\n    return <Loader active inline='centered' />\r\n  }\r\n\r\n\r\n\r\n}","import React, { useEffect, useState } from 'react'\nimport { Container, Dropdown, Header, Grid } from 'semantic-ui-react'\nimport AppBar from './AppBar';\nimport Geographies from './Geographies';\nimport Geography from './Geography';\nimport ComposableMap from './ComposableMap';\nimport { useParams, useHistory } from 'react-router-dom';\nimport Notes from './Notes';\nimport ReactTooltip from \"react-tooltip\";\nimport stateOptions from \"./stateOptions.json\";\nimport configs from \"./state_config.json\";\nimport _ from 'lodash';\nimport { scaleQuantile } from \"d3-scale\";\n\n\nconst colorPalette = [\n        \"#e1dce2\",\n        \"#d3b6cd\",\n        \"#bf88b5\", \n        \"#af5194\", \n        \"#99528c\", \n        \"#633c70\", \n      ];\nconst colorPalette2 = [\n        \"#e1dce2\",\n        \"#71C7EC\",\n        \"#1EBBD7\",\n        \"#0B92BF\", \n        \"#0270A1\", \n        \"#024174\",  \n      ];\n\nexport default function CountyCompare() {\n\n  const [stateFips, setStateFips] = useState();\n  const [measureA, setMeasureA] = useState();\n  const [measureB, setMeasureB] = useState();  \n  const [colorScaleA, setColorScaleA] = useState();\n  const [colorScaleB, setColorScaleB] = useState();\n  const [config, setConfig] = useState();\n  const [tooltipContent, setTooltipContent] = useState('');\n  const [data, setData] = useState();\n  const [varMap, setVarMap] = useState({});\n  const [measureOptionsA, setMeasureOptionsA] = useState([]);\n  const [measureOptionsB, setMeasureOptionsB] = useState([]);\n\n\n\n  useEffect(()=>{\n    fetch('/data/rawdata/variable_mapping.json').then(res => res.json())\n      .then(x => {\n        setVarMap(x);\n        setMeasureOptionsA(_.filter(_.map(x, d=> {\n          return {key: d.name, value: d.name, text: d.name, group: d.group};\n        }), d => (d.key !== \"Urban-Rural Status\") && (d.group === \"outcomes\")));\n        setMeasureOptionsB(_.filter(_.map(x, d=> {\n          return {key: d.name, value: d.name, text: d.name, group: d.group};\n        }), d => (d.key !== \"Urban-Rural Status\") && (d.group !== \"outcomes\")));\n\n      });\n  }, []);\n\n  useEffect(()=>{\n    \n    const configMatched = configs.find(s => s.fips === stateFips);\n    setConfig(configMatched);\n\n    if (stateFips && varMap){\n      fetch('/data/data.json').then(res => res.json())\n        .then(data => {\n          let coldata = {};\n          const dataFltrd = _.filter(_.map(data, (d, k)=>{d.fips=k; return d;}), (d)=> (\n                 d.fips.length===5 &&\n                 d.fips.substring(0,2)===stateFips));\n          _.each(dataFltrd, (d) => {\n            _.each(d, (v, k)=>{\n              if (varMap[k]){\n                if (!(varMap[k].name in coldata)){\n                  coldata[varMap[k].name] = {};\n                }\n                coldata[varMap[k].name][d.fips] = v; \n              }\n            });\n          });\n          setData(coldata);\n\n        });\n      setMeasureA(null);\n      setMeasureB(null);\n      setColorScaleA(null);\n      setColorScaleB(null);\n    }\n  }, [stateFips]);\n\n  useEffect(() => {\n    if (measureA){\n      const cs = scaleQuantile()\n        .domain(_.map(data[measureA], d=>d))\n        .range(colorPalette);\n      let scaleMap = {}\n      _.each(data[measureA], d=>{\n        scaleMap[d] = cs(d)});\n      setColorScaleA(scaleMap);\n\n      \n    }\n  }, [measureA]);\n\n  useEffect(() => {\n    if (measureB){\n      const cs = scaleQuantile()\n        .domain(_.map(data[measureB], d=>d))\n        .range(colorPalette2);\n      let scaleMap = {}\n      _.each(data[measureB], d=>{\n        scaleMap[d] = cs(d)});\n      setColorScaleB(scaleMap);\n    }\n  }, [measureB]);  \n\n\n\n  return (\n      <div>\n        <AppBar menu='countyCompare'/>\n        <Container style={{marginTop: '8em'}}>\n          <Header as='h3'>\n            <Header.Content style={{fontWeight: 400}}>\n              Side-by-Side View of Counties in&nbsp;\n              <Dropdown\n                icon=''\n                style={{background: '#fff', \n                        fontWeight: 400, \n                        width: '200px',\n                        borderTop: 'none',\n                        borderLeft: 'none',\n                        borderRight: 'none', \n                        borderBottom: '1px solid #bdbfc1',\n                        borderRadius: 0,\n                        minHeight: '2.2em',\n                        paddingBottom: '0.2em'}}\n                placeholder='Select State'\n                inline\n                search\n                selection\n                options={stateOptions}\n                onChange={(e, { value }) => {\n                  setStateFips(value);\n                }}\n              />\n            </Header.Content>\n          </Header>\n\n          {config &&\n          <Grid columns={2} style={{paddingTop: '2em', minHeight: '400px'}}>\n            <Grid.Row>\n              <Grid.Column>\n                <Grid columns={2} centered>\n                  <Grid.Column>\n                  <svg width = \"500\" height=\"30\">\n                       <text x={0} y={15} style={{fontSize: '1.0em'}}>COVID-19 Outcome Measure:  </text>\n                  </svg>\n                    <Dropdown\n                      style={{background: '#fff', \n                              fontWeight: 400, \n                              borderTop: 'none',\n                              borderLeft: 'none',\n                              borderRight: 'none', \n                              borderBottom: '1ox solid #bdbfc1',\n                              borderRadius: 0}}\n                      placeholder='Select Measure'\n                      search\n                      selection\n                      value={measureA}\n                      options={measureOptionsA}\n                      onChange={(e, { value }) => {\n                        setMeasureA(value)\n                      }}\n                    />\n\n                    <svg width=\"350\" height=\"110\">\n                            {_.map(colorPalette, (color, i) => {\n                              return <rect key={i} x={40*i} y={40} width=\"40\" height=\"40\" style={{fill: color, strokeWidth:1, stroke: color}}/>                    \n                            })} \n                            <text x={0} y={36} style={{fontSize: '1.2em'}}> Low </text>\n                            <text x={40 * (colorPalette.length - 1)} y={36} style={{fontSize: '1.2em'}}> High </text> \n\n                    </svg>\n\n                  </Grid.Column>\n                </Grid>\n              </Grid.Column>\n              <Grid.Column>\n                <Grid columns={2} centered>\n                  <Grid.Column>\n\n                  <svg width = \"500\" height=\"30\">\n                      <text x={0} y={15} style={{fontSize: '1.0em'}}>COVID-19 Social Determinants/County Characteristics:  </text>\n                  </svg>\n\n                    <Dropdown\n                      style={{background: '#fff', \n                              fontWeight: 400, \n                              borderTop: 'none',\n                              borderLeft: 'none',\n                              borderRight: 'none', \n                              borderBottom: '1ox solid #bdbfc1',\n                              borderRadius: 0}}\n                      placeholder='Select Measure'\n                      fluid\n                      labeled\n                      search\n                      selection\n                      value={measureB}\n                      options={measureOptionsB}\n                      onChange={(e, { value }) => {\n                        setMeasureB(value)\n                      }}\n                    />\n\n                    <svg width=\"350\" height=\"110\">\n                            {_.map(colorPalette2, (color, i) => {\n                              return <rect key={i} x={40*i} y={40} width=\"40\" height=\"40\" style={{fill: color, strokeWidth:1, stroke: color}}/>                    \n                            })} \n                            <text x={0} y={36} style={{fontSize: '1.2em'}}>Low</text>\n                            <text x={40 * (colorPalette2.length - 1)} y={36} style={{fontSize: '1.2em'}}>High</text>    \n\n                    </svg>\n\n                  </Grid.Column>\n                </Grid>\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row>\n              <Grid.Column>\n                <ComposableMap projection=\"geoAlbersUsa\" \n                  projectionConfig={{scale:`${config.scale}`}} \n                  width={500} \n                  height={600} \n                  data-tip=\"\"\n                  offsetX={config.offsetX}\n                  offsetY={config.offsetY}>\n                  <Geographies geography={config.url}>\n                    {({geographies}) => geographies.map(geo => \n                      <Geography \n                        key={geo.rsmKey} \n                        geography={geo} \n                        onMouseEnter={()=>{\n                          if(measureA && colorScaleA){\n                            const cur = data[measureA][geo.properties.COUNTYFP];\n                            setTooltipContent(cur?(Math.round(cur*100)/100):'');\n                          }\n                        }}\n                        onMouseLeave={()=>{\n                          setTooltipContent(\"\")\n                        }}\n                        fill={(measureA && colorScaleA && data[measureA][stateFips+geo.properties.COUNTYFP])?\n                                colorScaleA[data[measureA][stateFips+geo.properties.COUNTYFP]] : \"#EEE\"}\n                      />\n                    )}\n                  </Geographies>\n                </ComposableMap>\n              </Grid.Column>\n              <Grid.Column>\n                <ComposableMap projection=\"geoAlbersUsa\" \n                  projectionConfig={{scale:`${config.scale}`}} \n                  width={500} \n                  height={600} \n                  data-tip=\"\"\n                  offsetX={config.offsetX}\n                  offsetY={config.offsetY}>\n                  <Geographies geography={config.url}>\n                    {({geographies}) => geographies.map(geo => \n                      <Geography \n                        key={geo.rsmKey} \n                        geography={geo} \n                        onMouseEnter={()=>{\n                          if(measureB && colorScaleB){\n                            const cur = data[measureB][geo.properties.COUNTYFP];\n                            setTooltipContent(cur?(Math.round(cur*100)/100):'');\n                          }\n                        }}\n                        onMouseLeave={()=>{\n                          setTooltipContent(\"\")\n                        }}\n                        fill = {(measureB && colorScaleB && data[measureB][stateFips+geo.properties.COUNTYFP])?\n                                colorScaleB[data[measureB][stateFips+geo.properties.COUNTYFP]] : \"#EEE\"}\n                      />\n                    )}\n                  </Geographies>\n                </ComposableMap>\n                <ReactTooltip>{tooltipContent}</ReactTooltip>\n              </Grid.Column>\n            </Grid.Row>  \n          </Grid>\n          }\n          <Notes />\n        </Container>\n\n      </div>\n    );\n\n}","import React from 'react'\nimport AppBar from './AppBar';\nimport Notes from './Notes';\nimport { Container, Grid, List, Divider, Image, Header, Segment } from 'semantic-ui-react'\n\nexport default function AboutUs(props){\n\n  return (\n    <div>\n      <AppBar menu='aboutUs'/>\n      <Container style={{marginTop: '8em'}}>\n        <Header as='h1' style={{fontWeight: 400}}>\n          <Header.Content>\n            About Us\n            <Header.Subheader style={{fontWeight: 300}}>We are a group of epidemiologists, doctors, and software engineers from Emory University and University of Michigan.</Header.Subheader>\n          </Header.Content>\n        </Header>\n        <Grid columns={3}>\n          <Grid.Column>\n            <List bulleted>\n              <List.Item>Shivani A. Patel, PhD</List.Item>\n              <List.Item>K. M. Venkat Narayan, MD</List.Item>\n              <List.Item>Carlos Del Rio, MD</List.Item>\n              <List.Item>Mark Hutcheson, BS</List.Item>\n              <List.Item>Yubin Park, PhD</List.Item>\n              <List.Item>Daesung Choi, PhD</List.Item>\n              <List.Item>Pooja Naik, B.Pharm</List.Item>\n              <List.Item>Star Liu</List.Item>\n            </List>\n          </Grid.Column>\n          <Grid.Column>\n            <List bulleted>\n              <List.Item>Leanna Ehrlich, BA</List.Item>\n              <List.Item>Neil K. Mehta, PhD</List.Item>\n              <List.Item>Vince Marconi, MD</List.Item>\n              <List.Item>Michael Kramer, PhD</List.Item>\n              <List.Item>Rob O'Reilly, PhD</List.Item>\n              <List.Item>Sanjana Pampati, MPH</List.Item>\n              <List.Item>Joyce Ho, PhD</List.Item>\n              <List.Item>Shabatun Jamila Islam, MD</List.Item>\n            </List>\n          </Grid.Column>\n          <Grid.Column>\n            <List bulleted>\n              <List.Item>Anurag Mehta, MD</List.Item>\n              <List.Item>Aditi Nayak , MD</List.Item>\n              <List.Item>Arshed Quyyumi , MD</List.Item>\n              <List.Item>Yi-Ann Co, PhD</List.Item>\n              <List.Item>Samaah Sullivan, MD</List.Item>\n              <List.Item>Mohammed K. Ali, MD</List.Item>\n            </List>\n          </Grid.Column>\n        </Grid>\n        <Divider hidden/>\n        <Header as='h2' style={{fontWeight: 400}}>\n          <Header.Content>\n            Support\n          </Header.Content>\n        </Header>\n        <p>The COVID-19 Health Equity Dashboard was developed with seed funding from Emory University’s Woodruff Health Sciences and support from the Georgia Center for Diabetes Translation Research.</p>\n        <Divider hidden/>\n        <Header as='h2' style={{fontWeight: 400}}>\n          <Header.Content>\n            Feedback\n          </Header.Content>\n        </Header>\n        <p>We strive to make this a user-friendly resource for policy makers, public health actors, the public, researchers, \n          and the media. Please share your feedback by mailing us at: \n          <a href=\"mailto:covid19dashboard@emory.edu\"> covid19dashboard@emory.edu</a>\n        </p>\n\n        <Notes />\n\n      </Container>\n    </div>);\n}\n","import React from 'react'\nimport AppBar from './AppBar';\nimport Notes from './Notes';\nimport { Container, Grid, List, Divider, Image, Header, Table } from 'semantic-ui-react'\n\nexport default function DataSources(props){\n\n  return (\n    <div>\n      <AppBar menu='dataSources'/>\n      <Container style={{marginTop: '8em'}}>\n        <Header as='h2' style={{fontWeight: 400}}>\n          <Header.Content>\n            Data Sources and Interpretation\n          </Header.Content>\n        </Header>\n        <Divider hidden/>\n        <Table basic='very' style={{fontWeight: 400}}>\n          <Table.Header>\n            <Table.Row>\n              <Table.HeaderCell width={3}>Measure</Table.HeaderCell>\n              <Table.HeaderCell width={5}>Data Source</Table.HeaderCell>\n              <Table.HeaderCell width={8}>How to Interpret</Table.HeaderCell>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>\n            <Table.Row>\n              <Table.Cell>Total COVID-19 Cases</Table.Cell>\n              <Table.Cell>The New York Times Coronavirus (Covid-19) Data in the United States </Table.Cell>\n              <Table.Cell><i>Total COVID-19 Cases</i> is the number of people who have tested positive for COVID-19 in each county. This database includes case counts from \"both laboratory confirmed and probable cases using criteria that were developed by states and the federal government.\" </Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>Total COVID-19 Deaths</Table.Cell>\n              <Table.Cell>The New York Times Coronavirus (Covid-19) Data in the United States  </Table.Cell>\n              <Table.Cell><i>Total COVID-19 Deaths</i> is the number of people who have died of confirmed or presumed COVID-19 cases in each county. This database includes case counts from \"both laboratory confirmed and probable cases using criteria that were developed by states and the federal government.\" </Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>Average Daily COVID-19 Cases</Table.Cell>\n              <Table.Cell>Derived from the New York Times Coronavirus (Covid-19) Data in the United States </Table.Cell>\n              <Table.Cell><i>Average Daily Deaths</i> is the average number of deaths due to confirmed or presumed COVID-19 infection per county in the United States over the last seven days. </Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>Average Daily COVID-19 Deaths</Table.Cell>\n              <Table.Cell>Derived from the New York Times Coronavirus (Covid-19) Data in the United States  </Table.Cell>\n              <Table.Cell><i>Average Daily Cases</i> is the average number of positive cases for COVID-19 infection per county in the United States over the last seven days. </Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>Total COVID-19 Deaths per 100,000</Table.Cell>\n              <Table.Cell>Derived from the New York Times Coronavirus (Covid-19) Data in the United States and Bridged-race population estimates by The National Center for Health Statistics.</Table.Cell>\n              <Table.Cell><i>Total Deaths per 100,000</i> helps us understand COVID-19 deaths by population of the county per 100,000 people. <br/>\n                          If every county in the United States had 100,000 residents, this is how many would have died in each county from COVID-19. This measurement adjusts for different counties’ populations to provide a standardized point of comparison of deaths in each county.\n              </Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>Total COVID-19 Cases per 100,000</Table.Cell>\n              <Table.Cell>Derived from the New York Times Coronavirus (Covid-19) Data in the United States and Bridged-race population estimates by The National Center for Health Statistics. </Table.Cell>\n              <Table.Cell><i>Total Cases per 100,000</i> helps us understand COVID-19 cases (people who have tested positive for COVID-19) by the population of the county per 100,000 people. <br/>\n                        If every county in the United States had 100,000 residents, this is how many would have COVID-19 in each county. This measurement adjusts for different counties’ populations to provide a standardized point of comparison of cases in each county.\n              </Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>Average Daily COVID-19 Deaths per 100,000</Table.Cell>\n              <Table.Cell>Derived from the New York Times Coronavirus (Covid-19) Data in the United States and Bridged-race population estimates by The National Center for Health Statistics. </Table.Cell>\n              <Table.Cell><i>Average Daily Deaths per 100,000</i> helps us understand the average number of deaths due to confirmed or presumed COVID-19 infection over the last seven days by population of the county per 100,000 people. \n                <br/>If every county in the United States had 100,000 residents, this is how many would have died from COVID-19 over a recent 7-day period, in each county. This measurement adjusts for different counties’ populations to provide a standardized point of comparison of deaths in each county.\n              </Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>Average Daily COVID-19 Cases per 100,000</Table.Cell>\n              <Table.Cell>Derived from the New York Times Coronavirus (Covid-19) Data in the United States and Bridged-race population estimates by The National Center for Health Statistics. </Table.Cell>\n              <Table.Cell><i>Average Daily Cases per 100,000</i> helps us understand the average number of positive cases for COVID-19 infection over the last seven days by population of the county per 100,000 people. <br/>\n                  If every county in the United States had 100,000 residents, this is how many would have tested positive for COVID-19 over a recent 7-day period, in each county. This measurement adjusts for different counties’ populations to provide a standardized point of comparison of cases in each county.\n              </Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>% African American</Table.Cell>\n              <Table.Cell>American Community Survey by the U.S. Census Bureau </Table.Cell>\n              <Table.Cell><i>% African American</i> is the percentage of residents in each county who self-identify as having African American ancestry. These data are from 2018. </Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>% Minority</Table.Cell>\n              <Table.Cell>American Community Survey by the U.S. Census Bureau </Table.Cell>\n              <Table.Cell><i>% Minority</i> is the percentage of residents in each county who self-identify as having ancestry other than non-Hispanic white. These data are from 2018. </Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>% in Poverty</Table.Cell>\n              <Table.Cell>American Community Survey by the U.S. Census Bureau </Table.Cell>\n              <Table.Cell><i>% in Poverty</i> is the percentage of residents in each county whose household income falls at or below the poverty thresholds set by the U.S. Census Bureau. These data are from 2018. </Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>% Uninsured</Table.Cell>\n              <Table.Cell>American Community Survey by the U.S. Census Bureau </Table.Cell>\n              <Table.Cell><i>% Uninsured</i> is the percentage of residents in each county who currently lack personal health insurance. These data are from 2018. </Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>% Diabetes</Table.Cell>\n              <Table.Cell>CDC Division of Diabetes Translation </Table.Cell>\n              <Table.Cell><i>% Diabetes</i> is the percentage of residents in each county who currently have a medical diagnosis of Type 2 Diabetes, previously called Adult Onset Diabetes. These data are from 2016. </Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>% Obesity</Table.Cell>\n              <Table.Cell>CDC Division of Diabetes Translation </Table.Cell>\n              <Table.Cell><i>% Obesity</i> is the percentage of residents in each county who have obesity, defined as having a Body Mass Index (weight in kilograms divided by the square of height in meters) above 30. These data are from 2016.  </Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>% over 65 y/o</Table.Cell>\n              <Table.Cell>American Community Survey by the U.S. Census Bureau </Table.Cell>\n              <Table.Cell><i>% over 65 y/o</i> is the percentage of residents in each county who are older than 65 years. These data are from 2018.</Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>% in Group Quarters</Table.Cell>\n              <Table.Cell>American Community Survey by the U.S. Census Bureau </Table.Cell>\n              <Table.Cell><i>% in Group Quarters</i> is the percentage of residents in each county who live in group living arrangements, such as nursing or assisted-living facilities. These data are from 2018. </Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>% Male</Table.Cell>\n              <Table.Cell>American Community Survey by the U.S. Census Bureau </Table.Cell>\n              <Table.Cell><i>% Male</i> is the percentage of residents in each county who are male. These data are from 2018.</Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>Socioeconomic Vulnerability</Table.Cell>\n              <Table.Cell>CDC’s Social Vulnerability Index data 2018 database</Table.Cell>\n              <Table.Cell><i>Socioeconomic Vulnerability</i> is a composite measurement for each county that takes into account poverty, unemployment, per capita income, and not having a high school diploma; with the highest level of vulnerability assigned to tracts in the top 10% based on values for all of these measurements. These data are from 2018.</Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>Household Composition Vulnerability</Table.Cell>\n              <Table.Cell>CDC’s Social Vulnerability Index data 2018 database</Table.Cell>\n              <Table.Cell><i>Household Composition Vulnerability</i> is a composite measurement for each county that takes into account population aged 65 and older, population aged 17 and younger, people with disabilities who do not live in an institutional setting, and single-parent households with child(ren) under age 18; with the highest level of vulnerability assigned to tracts in the top 10% based on values for all of these measurements. These data are from 2018.</Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>Minority/Language Vulnerability</Table.Cell>\n              <Table.Cell>CDC’s Social Vulnerability Index data 2018 database</Table.Cell>\n              <Table.Cell><i>Minority/Language Vulnerability</i> is a composite measurement for each county that takes into account all people except the white non-Hispanic population and those who speak English “less than well,” with the highest level of vulnerability assigned to tracts in the top 10% based on values for the measurements. These data are from 2018.</Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>Housing/Transportation Vulnerability</Table.Cell>\n              <Table.Cell>CDC’s Social Vulnerability Index data 2018 database</Table.Cell>\n              <Table.Cell><i>Housing/Transportation Vulnerability</i> is a composite measurement for each county that takes into account living structures with 10 or more units, mobile homes, having more people than rooms in occupied housing, households with no vehicle available, and those living in institutionalized group quarters; with the highest level of vulnerability assigned to tracts in the top 10% based on values for all of these measurements. These data are from 2018.</Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>Population</Table.Cell>\n              <Table.Cell>Bridged-race population estimates by The National Center for Health Statistics </Table.Cell>\n              <Table.Cell><i>Population</i> is the total number of people who live in each county. </Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>Population Density</Table.Cell>\n              <Table.Cell>American Community Survey by the U.S. Census Bureau </Table.Cell>\n              <Table.Cell><i>Population Density</i> is the total number of people who live in each county per square mile. </Table.Cell>\n            </Table.Row>\n            <Table.Row>\n              <Table.Cell>Household Income</Table.Cell>\n              <Table.Cell>American Community Survey by the U.S. Census Bureau</Table.Cell>\n              <Table.Cell><i>Household Income</i> measures the average total income per household in each county. These data are from 2018.</Table.Cell>\n            </Table.Row>            \n          </Table.Body>\n        </Table>\n        <Notes />\n      </Container>\n    </div>);\n}\n","// React\nimport React from \"react\";\n// Components & Hooks\nimport USMap from \"./USMap\";\nimport StateMap from \"./StateMap\";\nimport CountyReport from \"./CountyReport\";\nimport CountyCompare from \"./CountyCompare\";\nimport AboutUs from \"./AboutUs\";\nimport DataSources from \"./DataSources\";\nimport 'semantic-ui-css/semantic.min.css'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\";\n\n\nApp.propTypes = {};\nexport default function App() {\n\n  return (\n      <Router>\n        <Switch>\n          <Route path='/compare-counties'>\n            <CountyCompare />\n          </Route>\n          <Route path='/about-team'>\n            <AboutUs />\n          </Route>\n          <Route path='/data-sources'>\n            <DataSources />\n          </Route>          \n          <Route path='/:stateFips/:countyFips'>\n            <CountyReport />\n          </Route>  \n          <Route path='/:stateFips'>\n            <StateMap />\n          </Route>\n          <Route path='/'>\n            <StateMap />\n          </Route>\n          <Route path=\"*\">\n            <Redirect to='/'/>\n          </Route>\n        </Switch>\n      </Router>\n  );\n}\n\n","import 'react-app-polyfill/ie9';\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}